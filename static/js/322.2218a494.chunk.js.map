{"version":3,"file":"static/js/322.2218a494.chunk.js","mappings":"oLAoBA,MAAMA,EAAW,CACf,CAAEC,GAAI,eAAgBC,MAAO,gBAC7B,CAAED,GAAI,qBAAsBC,MAAO,sBACnC,CAAED,GAAI,UAAWC,MAAO,YA4T1B,EApQyBC,KACvB,MAAOC,EAAiBC,GAAsBC,EAAAA,SAAe,iBACtDC,EAAWC,GAAgBF,EAAAA,UAAe,IAC3C,MAAEG,IAAUC,EAAAA,EAAAA,MACZC,EAASF,EAAQ,KAEvBH,EAAAA,WAAgB,KACdE,GAAa,EAAK,GACjB,IAEHF,EAAAA,WAAgB,KACd,MASMM,EAAW,IAAIC,sBATOC,IAC1B,IAAK,MAAMC,KAASD,EAClB,GAAIC,EAAMC,eAAgB,CACxBX,EAAmBU,EAAME,OAAOhB,IAChC,KACF,CACF,GAG4D,CAC5DiB,UAAW,EACXC,WAAY,SAWd,OARkBnB,EAASoB,KAAKC,GAC9BC,SAASC,eAAeF,EAAQpB,MAExBuB,SAASH,IACjB,GAAKA,EACL,OAAOT,EAASa,QAAQJ,EAAQ,IAG3B,KACLT,EAASc,YAAY,CACtB,IAGH,MAAMC,GAAQC,EAAAA,EAAAA,MAAWC,MAAMC,aAAaC,QAAQC,YAAY,IAC1DC,EAAcC,IAAkD,IAAjD,SAAEC,GAAyCD,EAC9D,OAAOE,EAAAA,EAAAA,KAAA,QAAMC,MAAO,CAAEV,MAAOA,GAAQQ,SAAEA,GAAgB,EAMnDG,GACJC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,mJAGJI,EAAAA,EAAAA,MAACN,EAAW,CAAAE,SAAA,CACT,IAAI,yHAGQ,IAAI,kFAmBvB,OAAK5B,GAEHgC,EAAAA,EAAAA,MAACE,EAAAA,GAAU,CAAAN,SAAA,EACTI,EAAAA,EAAAA,MAACG,EAAAA,GAAkB,CACjBL,MAAO,CAAE5B,MAAOE,EAAS,OAAS,qBAClCgC,UAAWpC,EAAY,UAAY,GAAG4B,SAAA,EAEtCC,EAAAA,EAAAA,KAACQ,EAAAA,GAAa,CAAAT,UACZI,EAAAA,EAAAA,MAACM,EAAAA,GAAgB,CAAC5C,GAAG,eAAckC,SAAA,EACjCI,EAAAA,EAAAA,MAACO,EAAAA,GAAW,CAACC,KAAK,QAAQpB,MAAM,UAAUqB,UAAU,IAAGb,SAAA,EACrDC,EAAAA,EAAAA,KAACa,EAAAA,GAAe,CAAC/C,MAAM,WACvBkC,EAAAA,EAAAA,KAACa,EAAAA,GAAe,CAACC,KAAK,iBAAiBhD,MAAM,eAE/CkC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACO,KAAK,QAAOZ,SAAC,iBAClBG,QAGLC,EAAAA,EAAAA,MAACK,EAAAA,GAAa,CAAC3C,GAAG,qBAAoBkC,SAAA,EACpCI,EAAAA,EAAAA,MAACM,EAAAA,GAAgB,CAAAV,SAAA,EACfC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACO,KAAK,QAAOZ,SAAC,kCACnBC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,uBACNC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,sDACNC,EAAAA,EAAAA,KAACe,EAAAA,GAAW,CAACC,SAAS,aAAaC,KApJ3B,+CAsJVd,EAAAA,EAAAA,MAACM,EAAAA,GAAgB,CAAAV,SAAA,EACfC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,iBACNI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,mFAEW,KACfC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,6DAIfC,EAAAA,EAAAA,KAACe,EAAAA,GAAW,CAACC,SAAS,aAAaC,KA9JtB,4CAgKfjB,EAAAA,EAAAA,KAACS,EAAAA,GAAgB,CAAAV,UACfI,EAAAA,EAAAA,MAACe,EAAAA,GAAI,CAACpD,OAAOkC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,kBAAqBA,SAAA,EACtCI,EAAAA,EAAAA,MAACgB,EAAAA,GAAQ,CAAApB,SAAA,EACPC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,6BACNC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACH,MAAO,CAAEmB,UAAW,WAAYrB,SAAC,8DAGvCC,EAAAA,EAAAA,KAACe,EAAAA,GAAW,CACVd,MAAO,CAAEmB,UAAW,UACpBJ,SAAS,aACTC,KAzKF,ySA2KAd,EAAAA,EAAAA,MAACe,EAAAA,GAAI,CAACG,QAAQ,YAAWtB,SAAA,EACvBC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,0CACoC,KACxCC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,qCAGjBC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,6DACuD,KAC3DC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,iDAKjBC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,yBACmB,KACvBC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,qBAA8B,mGAOnDI,EAAAA,EAAAA,MAACgB,EAAAA,GAAQ,CAAClB,MAAO,CAAEmB,UAAW,WAAYrB,SAAA,EACxCC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,4BACNC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACH,MAAO,CAAEmB,UAAW,WAAYrB,SAAC,qFAIvCC,EAAAA,EAAAA,KAACe,EAAAA,GAAW,CACVd,MAAO,CAAEmB,UAAW,UACpBJ,SAAS,aACTC,KAhMW,uaAkMbd,EAAAA,EAAAA,MAACe,EAAAA,GAAI,CAACG,QAAQ,YAAWtB,SAAA,EACvBC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,+DAGVC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,yFAIVC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,2IAOdI,EAAAA,EAAAA,MAACgB,EAAAA,GAAQ,CAAClB,MAAO,CAAEmB,UAAW,WAAYrB,SAAA,EACxCC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,uCACNC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACH,MAAO,CAAEmB,UAAW,WAAYrB,SAAC,kIAKvCC,EAAAA,EAAAA,KAACe,EAAAA,GAAW,CACVd,MAAO,CAAEmB,UAAW,UACpBJ,SAAS,aACTC,KAxMU,2ZA0MZd,EAAAA,EAAAA,MAACe,EAAAA,GAAI,CAACG,QAAQ,YAAWtB,SAAA,EACvBC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,0EAIVC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,+DAGVC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,6HAIVC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,sFASpBI,EAAAA,EAAAA,MAACK,EAAAA,GAAa,CAAC3C,GAAG,UAASkC,SAAA,EACzBC,EAAAA,EAAAA,KAACS,EAAAA,GAAgB,CAAAV,UACfI,EAAAA,EAAAA,MAACe,EAAAA,GAAI,CAACpD,OAAOkC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACO,KAAK,QAAOZ,SAAC,YAAeA,SAAA,EAC7CC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,4GAIVC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,uEAEO,KACXC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,6CAGjBC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,SAAC,kGAIVC,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAAApB,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,gFAEgB,KACpBC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,4EAOrBC,EAAAA,EAAAA,KAACS,EAAAA,GAAgB,CAAAV,UACfC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,yLAQVxB,IACAyB,EAAAA,EAAAA,KAACsB,EAAAA,GAAO,CAACC,IAAI,OAAOC,MAAM,OAAMzB,SAC7BnC,EAASoB,KAAKC,IACbe,EAAAA,EAAAA,KAACyB,EAAAA,GAAW,CACVd,KAAK,QAELe,SAAU1D,IAAoBiB,EAAQpB,GACtC8D,QAASA,IA3LO9D,KAC1B,MAAM+D,EAAU1C,SAASC,eAAetB,GACpC+D,GACFA,EAAQC,eAAe,CACrBC,SAAU,SACVC,MAAO,QACPC,OAAQ,WAEZ,EAmLyBC,CAAmBhD,EAAQpB,IAAIkC,SAE7Cd,EAAQnB,OAJJmB,EAAQpB,YA9KFmC,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAAAN,SAAE,MAuLrB,C","sources":["content/UseRef.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  StyledMain,\n  StyledSection,\n  StyledSubsection,\n  StyledTopicContent,\n} from \"../components/StyledInternalComponents/StyledInternalComponents\";\nimport {\n  Breadcrumbs,\n  BreadcrumbsItem,\n  Text,\n  CodeDisplay,\n  List,\n  ListItem,\n  SideBar,\n  SideBarItem,\n  useTheme,\n} from \"stelios\";\nimport { useWindowSize } from \"../helpers/helpers\";\n\nconst sections = [\n  { id: \"introduction\", title: \"Introduction\" },\n  { id: \"detailed-breakdown\", title: \"Detailed Breakdown\" },\n  { id: \"summary\", title: \"Summary\" },\n];\n\nconst IMPORT_EXAMPLE = `import React, { useRef } from 'react';`;\nconst BASIC_USAGE_EXAMPlE = `const myRef = useRef(initialValue);`;\nconst ACCESS_DOM = `import React, { useRef, useEffect } from 'react';\n\nfunction MyComponent() {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // Focus the input element when the component mounts\n    inputRef.current.focus();\n  }, []);\n\n  return <input ref={inputRef} type=\"text\" />;\n}\n`;\nconst STORING_MUTABLE_EXAMPLE = `import React, { useRef, useState } from 'react';\n\nfunction Counter() {\n  const count = useRef(0);\n  const [, setRender] = useState(0);\n\n  const increment = () => {\n    count.current++;\n    console.log(count.current);\n  };\n\n  return (\n    <div>\n      <button onClick={increment}>Increment</button>\n      <button onClick={() => setRender(render => render + 1)}>Force Render</button>\n    </div>\n  );\n}\n`;\nconst VALUE_ACROSS_RERENDERS = `import React, { useRef, useEffect } from 'react';\n\nfunction Timer() {\n  const intervalId = useRef(null);\n  const count = useRef(0);\n\n  useEffect(() => {\n    intervalId.current = setInterval(() => {\n      count.current++;\n      console.log(count.current);\n    }, 1000);\n\n    return () => clearInterval(intervalId.current);\n  }, []);\n\n  return <div>Check the console for the count</div>;\n}\n`;\n\nconst UseRef: React.FC = () => {\n  const [sidebarSelected, setSidebarSelected] = React.useState(\"introduction\");\n  const [isMounted, setIsMounted] = React.useState(false);\n  const { width } = useWindowSize();\n  const mobile = width < 1200;\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  React.useEffect(() => {\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n      for (const entry of entries) {\n        if (entry.isIntersecting) {\n          setSidebarSelected(entry.target.id);\n          break;\n        }\n      }\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      threshold: 1,\n      rootMargin: \"64px\",\n    });\n\n    const _sections = sections.map((section) =>\n      document.getElementById(section.id)\n    );\n    _sections.forEach((section) => {\n      if (!section) return;\n      return observer.observe(section);\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  });\n\n  const color = useTheme().theme.colorPalette.primary.accentScale[10];\n  const Highlighted = ({ children }: { children: React.ReactNode }) => {\n    return <span style={{ color: color }}>{children}</span>;\n  };\n\n  /* --------------------------------------------------------------------------------------\n  |                            Data to be displayed                                       |\n  -------------------------------------------------------------------------------------- */\n  const INTRODUCTION_CONTENT = (\n    <Text>\n      useRef is a hook in React that provides a way to create a mutable object\n      which persists for the lifetime of the component. It is often used for\n      <Highlighted>\n        {\" \"}\n        accessing and manipulating DOM elements directly, storing mutable values\n        that do not cause re-renders when updated,\n      </Highlighted>{\" \"}\n      and maintaining values across renders without triggering a component\n      update.\n    </Text>\n  );\n\n  /* ----------------------------------------------------------------------------------- */\n\n  const onSideBarItemClick = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\",\n      });\n    }\n  };\n\n  if (!isMounted) return <StyledMain>{null}</StyledMain>;\n  return (\n    <StyledMain>\n      <StyledTopicContent\n        style={{ width: mobile ? \"100%\" : \"calc(100% - 12rem\" }}\n        className={isMounted ? \"fade-in\" : \"\"}\n      >\n        <StyledSection>\n          <StyledSubsection id=\"introduction\">\n            <Breadcrumbs size=\"small\" color=\"primary\" delimiter=\"/\">\n              <BreadcrumbsItem title=\"Hooks\" />\n              <BreadcrumbsItem link=\"/hooks/use-ref\" title=\"useRef\" />\n            </Breadcrumbs>\n            <Text size=\"large\">Introduction</Text>\n            {INTRODUCTION_CONTENT}\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"detailed-breakdown\">\n          <StyledSubsection>\n            <Text size=\"large\">Detailed Breakdown of useRef</Text>\n            <Text>Importing useRef </Text>\n            <Text>To use useRef, you need to import it from React:</Text>\n            <CodeDisplay language=\"javascript\" text={IMPORT_EXAMPLE} />\n          </StyledSubsection>\n          <StyledSubsection>\n            <Text>Basic Usage</Text>\n            <Text>\n              useRef returns a mutable object that persists for the lifetime of\n              the component.{\" \"}\n              <Highlighted>\n                It accepts an optional initial value as an argument.\n              </Highlighted>\n            </Text>\n            <CodeDisplay language=\"javascript\" text={BASIC_USAGE_EXAMPlE} />\n          </StyledSubsection>\n          <StyledSubsection>\n            <List title={<Text>Example Usage</Text>}>\n              <ListItem>\n                <Text>Accessing DOM Elements:</Text>\n                <Text style={{ marginTop: \"0.25rem\" }}>\n                  useRef is commonly used to access DOM elements directly.\n                </Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"javascript\"\n                  text={ACCESS_DOM}\n                />\n                <List variant=\"unordered\">\n                  <ListItem>\n                    <Text>\n                      inputRef is created using useRef(null),{\" \"}\n                      <Highlighted>initializing it with null.</Highlighted>\n                    </Text>\n                  </ListItem>\n                  <ListItem>\n                    <Text>\n                      The ref attribute of the input element is set to inputRef,{\" \"}\n                      <Highlighted>\n                        connecting the DOM element to the ref.\n                      </Highlighted>\n                    </Text>\n                  </ListItem>\n                  <ListItem>\n                    <Text>\n                      In the useEffect hook,{\" \"}\n                      <Highlighted>inputRef.current</Highlighted> gives direct\n                      access to the DOM element, allowing us to call the focus\n                      method on it.\n                    </Text>\n                  </ListItem>\n                </List>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.25rem\" }}>\n                <Text>Storing Mutable Values</Text>\n                <Text style={{ marginTop: \"0.25rem\" }}>\n                  useRef can store values that persist across renders without\n                  causing re-renders.\n                </Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"javascript\"\n                  text={STORING_MUTABLE_EXAMPLE}\n                />\n                <List variant=\"unordered\">\n                  <ListItem>\n                    count is created using useRef(0), initializing it with 0.\n                  </ListItem>\n                  <ListItem>\n                    count.current is incremented in the increment function\n                    without causing a re-render.\n                  </ListItem>\n                  <ListItem>\n                    The Force Render button uses setRender to force a re-render,\n                    demonstrating that count.current retains its value across\n                    renders.\n                  </ListItem>\n                </List>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.25rem\" }}>\n                <Text>Persisting Values Across Renders:</Text>\n                <Text style={{ marginTop: \"0.25rem\" }}>\n                  useRef can be used to keep track of values that need to\n                  persist across renders but do not require re-rendering when\n                  updated.\n                </Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"javascript\"\n                  text={VALUE_ACROSS_RERENDERS}\n                />\n                <List variant=\"unordered\">\n                  <ListItem>\n                    intervalId is created using useRef(null), initializing it\n                    with null.\n                  </ListItem>\n                  <ListItem>\n                    count is created using useRef(0), initializing it with 0.\n                  </ListItem>\n                  <ListItem>\n                    In the useEffect hook, intervalId.current stores the ID of\n                    the interval, and count.current is incremented every second.\n                  </ListItem>\n                  <ListItem>\n                    The cleanup function clears the interval using\n                    intervalId.current.\n                  </ListItem>\n                </List>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"summary\">\n          <StyledSubsection>\n            <List title={<Text size=\"large\">Summary</Text>}>\n              <ListItem>\n                Initialization: useRef(initialValue) returns a ref object with a\n                current property set to initialValue.\n              </ListItem>\n              <ListItem>\n                <Text>\n                  DOM Access: Attach the ref to a DOM element using the ref\n                  attribute.{\" \"}\n                  <Highlighted>Access the element via ref.current</Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                Mutable Values: Store mutable values that persist across renders\n                without causing re-renders.\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Persistent Values: Maintain values across renders without\n                  causing re-renders,{\" \"}\n                  <Highlighted>\n                    suitable for storing interval IDs, timers, and other values.\n                  </Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n          <StyledSubsection>\n            <Text>\n              useRef is a versatile hook that helps manage mutable values and\n              direct DOM manipulations in functional components, making it a\n              crucial tool for complex React applications.\n            </Text>\n          </StyledSubsection>\n        </StyledSection>\n      </StyledTopicContent>\n      {!mobile && (\n        <SideBar top=\"6rem\" right=\"4rem\">\n          {sections.map((section) => (\n            <SideBarItem\n              size=\"small\"\n              key={section.id}\n              selected={sidebarSelected === section.id}\n              onClick={() => onSideBarItemClick(section.id)}\n            >\n              {section.title}\n            </SideBarItem>\n          ))}\n        </SideBar>\n      )}\n    </StyledMain>\n  );\n};\n\nexport default UseRef;\n"],"names":["sections","id","title","UseRef","sidebarSelected","setSidebarSelected","React","isMounted","setIsMounted","width","useWindowSize","mobile","observer","IntersectionObserver","entries","entry","isIntersecting","target","threshold","rootMargin","map","section","document","getElementById","forEach","observe","disconnect","color","useTheme","theme","colorPalette","primary","accentScale","Highlighted","_ref","children","_jsx","style","INTRODUCTION_CONTENT","_jsxs","Text","StyledMain","StyledTopicContent","className","StyledSection","StyledSubsection","Breadcrumbs","size","delimiter","BreadcrumbsItem","link","CodeDisplay","language","text","List","ListItem","marginTop","variant","SideBar","top","right","SideBarItem","selected","onClick","element","scrollIntoView","behavior","block","inline","onSideBarItemClick"],"sourceRoot":""}