{"version":3,"file":"static/js/566.63acfcd4.chunk.js","mappings":"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","sources":["content/UseState.tsx","../node_modules/@tabler/icons-react/src/icons/IconMoodSmileDizzy.ts"],"sourcesContent":["import * as React from \"react\";\nimport {\n  StyledMain,\n  StyledSection,\n  StyledSubsection,\n  StyledTopicContent,\n} from \"../components/StyledInternalComponents/StyledInternalComponents\";\nimport {\n  Breadcrumbs,\n  BreadcrumbsItem,\n  Text,\n  CodeDisplay,\n  List,\n  ListItem,\n  SideBar,\n  SideBarItem,\n  useTheme,\n  Alert,\n} from \"stelios\";\nimport { IconMoodSmileDizzy } from \"@tabler/icons-react\";\nimport { useWindowSize } from \"../helpers/helpers\";\nconst BASIC_USAGE_1 = `import React, { useState } from 'react';`;\nconst BASIC_USAGE_SYNTAX = `const [state, setState] = useState(initialState);`;\nconst BASIC_USAGE_EXAMPLE = `import React, { useState } from 'react';\n\nfunction Counter() {\n  // Declare a state variable 'count' with an initial value of 0\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;\n`;\nconst INITIAL_STATE_1 = `const [state, setState] = useState(initialValue);`;\nconst INITIAL_STATE_2 = `const [state, setState] = useState(() => {\n  const initialState = someExpensiveComputation();\n  return initialState;\n});`;\nconst UPDATING_STATE = `// Updating state with a new value\nsetState(newValue);\n\n// Updating state with a function\nsetState(prevState => {\n  // Calculate new state based on prevState\n  return newState;\n});\n`;\n\nconst sections = [\n  { id: \"introduction\", title: \"Introduction\" },\n  { id: \"basic-usage\", title: \"Basic Usage\" },\n  { id: \"syntax\", title: \"Syntax\" },\n  { id: \"example\", title: \"Example\" },\n  { id: \"explanation\", title: \"Explanation\" },\n  { id: \"rules-of-hooks\", title: \"Rules of Hooks\" },\n  { id: \"initial-state\", title: \"Initial State\" },\n  { id: \"updating-state\", title: \"Updating State\" },\n];\n\nconst UseState: React.FunctionComponent = () => {\n  const [sidebarSelected, setSidebarSelected] = React.useState(\"introduction\");\n  const [isMounted, setIsMounted] = React.useState(false);\n  const { width } = useWindowSize();\n  const mobile = width < 1200;\n\n  const color = useTheme().theme.colorPalette.primary.accentScale[10];\n\n  const Highlighted = ({ children }: { children: React.ReactNode }) => {\n    return <span style={{ color: color }}>{children}</span>;\n  };\n\n  /* --------------------------------------------------------------------------------------\n  |                            Data to be displayed                                       |\n  -------------------------------------------------------------------------------------- */\n  const EXPLANATION_1 = (\n    <Text>\n      The Counter component declares a state variable{\" \"}\n      <Highlighted>count</Highlighted> using the useState Hook with an initial\n      value of 0. It then renders a paragraph element that displays the current\n      count value and a button that increments the count value when clicked.\n    </Text>\n  );\n  const EXPLANATION_2 = (\n    <Text>\n      When the button is clicked, the setCount function is called with the{\" \"}\n      <Highlighted>new count value as an argument</Highlighted>. This triggers a\n      re-render of the component with the updated count value displayed in the\n      paragraph element.\n    </Text>\n  );\n\n  const INTRODUCTION_CONTENT = (\n    <Text>\n      The useState Hook is a fundamental part of the React Hooks API. It allows\n      functional components to <Highlighted>have their own state</Highlighted>,\n      a feature previously only available to class components. This capability\n      enhances the flexibility and simplicity of functional components, enabling\n      them to <Highlighted>manage their own state</Highlighted> without needing\n      to convert them into class components.\n    </Text>\n  );\n\n  /* ------------------------------------------------------------------------------------ */\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  React.useEffect(() => {\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n      for (const entry of entries) {\n        if (entry.isIntersecting) {\n          setSidebarSelected(entry.target.id);\n          break;\n        }\n      }\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      threshold: 1,\n      rootMargin: \"0px\",\n    });\n\n    const _sections = sections.map((section) =>\n      document.getElementById(section.id)\n    );\n    _sections.forEach((section) => {\n      if (!section) return;\n      return observer.observe(section);\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  });\n\n  const onSideBarItemClick = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\",\n      });\n    }\n  };\n\n  if (!isMounted) return <StyledMain>{null}</StyledMain>;\n\n  return (\n    <StyledMain>\n      <StyledTopicContent\n        style={{ width: mobile ? \"100%\" : \"calc(100% - 12rem\" }}\n        className={isMounted ? \"fade-in\" : \"\"}\n      >\n        <StyledSection id=\"introduction\">\n          <StyledSubsection>\n            <Breadcrumbs size=\"small\" color=\"primary\" delimiter=\"/\">\n              <BreadcrumbsItem title=\"Hooks\" />\n              <BreadcrumbsItem link=\"/hooks/use-state\" title=\"useState\" />\n            </Breadcrumbs>\n            <Alert\n              titleIcon={<IconMoodSmileDizzy />}\n              color=\"info\"\n              title=\"Fun Fact!\"\n              description=\"The useState Hook is the most commonly used Hook in React.\"\n              style={{ marginTop: \"0.5rem\" }}\n            />\n            <Text size=\"large\" style={{ marginTop: \"0.5rem\" }}>\n              Introduction\n            </Text>\n            {INTRODUCTION_CONTENT}\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"basic-usage\">\n          <StyledSubsection>\n            <Text size=\"large\">Basic Usage</Text>\n            <Text>\n              To use the useState Hook, you need to import it from React:\n            </Text>\n            <CodeDisplay language=\"JSX\" text={BASIC_USAGE_1} />\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"syntax\">\n          <StyledSubsection>\n            <Text size=\"large\">Syntax</Text>\n            <List\n              variant=\"ordered\"\n              title={\n                <Text>\n                  The useState Hook takes the initial state as an argument and\n                  returns an array with two elements:\n                </Text>\n              }\n            >\n              <ListItem>\n                <Text>\n                  The first element is the{\" \"}\n                  <Highlighted>current state value.</Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  The second element is a function that{\" \"}\n                  <Highlighted>\n                    allows you to update the state value.\n                  </Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n            <Text>Here's the syntax:</Text>\n            <CodeDisplay language=\"JSX\" text={BASIC_USAGE_SYNTAX} />\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"example\">\n          <Text size=\"large\">Example</Text>\n          <Text>\n            Here's an example of a simple counter component that uses the\n            useState Hook:\n          </Text>\n          <CodeDisplay language=\"JSX\" text={BASIC_USAGE_EXAMPLE} />\n        </StyledSection>\n        <StyledSection id=\"explanation\">\n          <Text size=\"large\">Explanation</Text>\n          <StyledSubsection>\n            {EXPLANATION_1}\n            {EXPLANATION_2}\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"rules-of-hooks\">\n          <List title={<Text size=\"large\">Rules of Hooks</Text>}>\n            <ListItem>\n              <Text>\n                Hooks should only be called at{\" \"}\n                <Highlighted>\n                  the top level of a functional component or another custom\n                  Hook.\n                </Highlighted>\n              </Text>\n            </ListItem>\n            <ListItem>\n              <Text>\n                Hooks should not be called inside{\" \"}\n                <Highlighted>\n                  loops, conditions, or nested functions.\n                </Highlighted>\n              </Text>\n            </ListItem>\n            <ListItem>\n              <Text>\n                Hooks should always be called in the{\" \"}\n                <Highlighted>same order</Highlighted>, and they should not be\n                called <Highlighted>conditionally</Highlighted>.\n              </Text>\n            </ListItem>\n          </List>\n        </StyledSection>\n        <StyledSection id=\"initial-state\">\n          <Text size=\"large\">Initial State</Text>\n          <Text>The initial state can be a value or a function:</Text>\n          <CodeDisplay language=\"JSX\" text={INITIAL_STATE_1} />\n          <Text style={{ marginTop: \"1rem\" }}>\n            If the initial state is a function, it will be executed{\" \"}\n            <Highlighted>only on the first render:</Highlighted>\n          </Text>\n          <CodeDisplay language=\"JSX\" text={INITIAL_STATE_2} />\n        </StyledSection>\n        <StyledSection id=\"updating-state\">\n          <Text size=\"large\">Updating State</Text>\n          <Text>\n            To update the state, you can call the function returned by the\n            useState Hook with the new state value as an argument.\n          </Text>\n          <Text>\n            Here's an example of updating the state in a counter component:\n          </Text>\n          <CodeDisplay language=\"JSX\" text={UPDATING_STATE} />\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection>\n            <List variant=\"ordered\" title={<Text size=\"large\">Summary</Text>}>\n              <ListItem>\n                <Text>\n                  The useState Hook allows functional components to{\" \"}\n                  <Highlighted>have their own state.</Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  It takes the initial state as an argument and returns an array\n                  with the <Highlighted>current state value</Highlighted> and a{\" \"}\n                  <Highlighted>function to update the state</Highlighted>.\n                </Text>\n              </ListItem>\n              <ListItem>\n                The initial state can be a value or a function that returns the\n                initial state value.\n              </ListItem>\n              <ListItem>\n                To update the state, you can call the function returned by the\n                useState Hook with the new state value or a function that\n                calculates the new state value.\n              </ListItem>\n            </List>\n            <Text style={{ marginTop: \"0.5rem\" }}>\n              Using useState effectively allows you to manage state in\n              functional components, providing more flexibility and simplifying\n              your React code.\n            </Text>\n          </StyledSubsection>\n        </StyledSection>\n      </StyledTopicContent>\n      {!mobile && (\n        <SideBar top=\"6rem\" right=\"4rem\" style={{ background: \"transparent\" }}>\n          {sections.map((section) => (\n            <SideBarItem\n              size=\"small\"\n              key={section.id}\n              selected={sidebarSelected === section.id}\n              onClick={() => onSideBarItemClick(section.id)}\n            >\n              {section.title}\n            </SideBarItem>\n          ))}\n        </SideBar>\n      )}\n    </StyledMain>\n  );\n};\n\nexport default UseState;\n","import createReactComponent from '../createReactComponent';\nexport default createReactComponent('outline', 'mood-smile-dizzy', 'IconMoodSmileDizzy', [[\"path\",{\"d\":\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\",\"key\":\"svg-0\"}],[\"path\",{\"d\":\"M14.5 15a3.5 3.5 0 0 1 -5 0\",\"key\":\"svg-1\"}],[\"path\",{\"d\":\"M8 9l2 2\",\"key\":\"svg-2\"}],[\"path\",{\"d\":\"M10 9l-2 2\",\"key\":\"svg-3\"}],[\"path\",{\"d\":\"M14 9l2 2\",\"key\":\"svg-4\"}],[\"path\",{\"d\":\"M16 9l-2 2\",\"key\":\"svg-5\"}]]);"],"names":["sections","id","title","UseState","sidebarSelected","setSidebarSelected","React","isMounted","setIsMounted","width","useWindowSize","mobile","color","useTheme","theme","colorPalette","primary","accentScale","Highlighted","_ref","children","_jsx","style","EXPLANATION_1","_jsxs","Text","EXPLANATION_2","INTRODUCTION_CONTENT","observer","IntersectionObserver","entries","entry","isIntersecting","target","threshold","rootMargin","map","section","document","getElementById","forEach","observe","disconnect","StyledMain","StyledTopicContent","className","StyledSection","StyledSubsection","Breadcrumbs","size","delimiter","BreadcrumbsItem","link","Alert","titleIcon","IconMoodSmileDizzy","description","marginTop","CodeDisplay","language","text","List","variant","ListItem","SideBar","top","right","background","SideBarItem","selected","onClick","element","scrollIntoView","behavior","block","inline","onSideBarItemClick","createReactComponent"],"sourceRoot":""}