{"version":3,"file":"static/js/463.b23277d2.chunk.js","mappings":"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","sources":["content/JSX.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  Breadcrumbs,\n  BreadcrumbsItem,\n  SideBar,\n  SideBarItem,\n  Text,\n  CodeDisplay,\n  List,\n  ListItem,\n  Alert,\n  useTheme,\n} from \"stelios\";\nimport {\n  StyledMain,\n  StyledSection,\n  StyledSubsection,\n  StyledTopicContent,\n} from \"../components/StyledInternalComponents/StyledInternalComponents\";\nimport { useWindowSize } from \"../helpers/helpers\";\n\nconst sections = [\n  { id: \"introduction\", title: \"Introduction\" },\n  { id: \"why-use-jsx\", title: \"Why use JSX?\" },\n  { id: \"jsx-syntax\", title: \"JSX Syntax\" },\n  { id: \"components-and-jsx\", title: \"Components and JSX\" },\n  { id: \"jsx-differences\", title: \"JSX Differences\" },\n  { id: \"jsx-expressions\", title: \"Javascript Expressions\" },\n];\n\nconst WHAT_IS_JSX_1 = `JSX is not a separate language but a syntax extension that looks similar to HTML or XML. It allows you to write HTML-like elements directly within JavaScript code.`;\nconst WHAT_IS_JSX_2 = `JSX code is transformed into JavaScript objects by tools like Babel before being executed by the browser. Under the hood, each JSX element is converted into a React.createElement() call.`;\nconst WHY_USE_JSX_TITLE = `Why Use JSX?`;\nconst WHY_USE_JSX_3 = `Component Structure: JSX makes it straightforward to define the structure and layout of React components.`;\nconst BASIC_SYNTAX_1 = `Tags: JSX uses tags similar to HTML. Tags can be self-closing (e.g., <input />) or have opening and closing tags (e.g., <div></div>).`;\nconst BASIC_SYNTAX_2 = `Embedding Expressions: You can embed JavaScript expressions within JSX using curly braces {}. For example, {2 + 2} or {user.name}.`;\nconst BASIC_SYNTAX_EXAMPLE = `const element = <h1>Hello, {user.name}!</h1>;`;\nconst BASIC_SYNTAX_LAST = `This JSX code will render an h1 element with the text \"Hello, [user's name]!\"`;\nconst COMPONENTS_JSX_1 = `Function Components: You can create components as functions that return JSX.`;\nconst COMPONENTS_JSX_1_EXAMPLE = `function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}`;\nconst COMPONENTS_JSX_2 = `Class Components: Class-based components also return JSX from their render method.`;\nconst COMPONENTS_JSX_2_EXAMPLE = `class Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n`;\nconst COMPONENTS_JSX_3 = `Composing Components: You can compose components together by including one component inside another.`;\nconst COMPONENTS_JSX_3_EXAMPLE = `function App() {\n  return (\n    <div>\n      <Welcome name=\"Alice\" />\n      <Welcome name=\"Bob\" />\n    </div>\n  );\n}\n`;\nconst JSX_DIFFERENCES_2 = `camelCase for Attributes: Attributes in JSX are in camelCase (onClick, tabIndex) rather than lowercase.`;\nconst JSX_DIFFERENCES_3 = `JSX is JavaScript: Since JSX is closer to JavaScript, it follows JavaScript's rules. For example, you can't use if statements directly in JSX, but you can use ternary operators or logical &&.`;\nconst JSX_EXPRESSION_EXAMPLE = `const name = \"John\";\nconst element = <h1>Hello, {name}!</h1>;\n`;\nconst FRAGMENTS_1 = `React Fragments: Sometimes you need to return multiple elements from a component, but they need to be wrapped in a single parent. React fragments (<React.Fragment> or <> </>) allow you to do this without adding an extra DOM node.`;\nconst FRAGMENTS_EXAMPLE = `function List() {\n  return (\n    <>\n      <li>Item 1</li>\n      <li>Item 2</li>\n    </>\n  );\n}\n`;\nconst CONDITIONAL_RENDERING_1 = `JSX allows conditional rendering using JavaScript expressions like ternary operators or logical operators.`;\nconst CONDITIONAL_RENDERING_EXAMPLE = `const isLoggedIn = true;\nconst element = isLoggedIn ? <h1>Welcome back!</h1> : <h1>Please sign up.</h1>;\n`;\nconst STYLING_JSX_1 = `Inline styles in JSX are specified as an object, with camelCase properties.`;\nconst STYLING_JSX_EXAMPLE = `const style = { backgroundColor: 'blue', color: 'white' };\nconst element = <h1 style={style}>Hello, world!</h1>;\n`;\nconst EVENT_HANDLING_1 = `Event handlers in JSX are similar to those in HTML but are written in camelCase, and the value is a JavaScript function.`;\nconst EVENT_HANDLING_EXAMPLE = `function handleClick() {\n  alert('Button clicked!');\n}\n\nconst element = <button onClick={handleClick}>Click Me</button>;\n`;\nconst KEY_POINTS_1 = `JSX Must Have a Single Parent Element: JSX expressions must return a single element. If you have multiple elements, wrap them in a parent element or a fragment.`;\nconst KEY_POINTS_2 = `JSX is not required: While JSX is commonly used in React, it's not required. You can use regular JavaScript to create elements using React.createElement(), but JSX is more concise and readable.`;\nconst CONCLUSION_1 = `JSX makes writing React components more intuitive by allowing you to describe the UI structure in a way that closely resembles HTML, while still being able to leverage JavaScript's power. It bridges the gap between markup and logic, providing a seamless way to build dynamic and interactive user interfaces.`;\n\nconst JSX: React.FunctionComponent = () => {\n  const [sidebarSelected, setSidebarSelected] = React.useState(\"introduction\");\n  const [isMounted, setIsMounted] = React.useState(false);\n  const { width } = useWindowSize();\n  const mobile = width < 1200;\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  React.useEffect(() => {\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n      for (const entry of entries) {\n        if (entry.isIntersecting) {\n          setSidebarSelected(entry.target.id);\n          break;\n        }\n      }\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      threshold: 1,\n      rootMargin: \"64px\",\n    });\n\n    const _sections = sections.map((section) =>\n      document.getElementById(section.id)\n    );\n    _sections.forEach((section) => {\n      if (!section) return;\n      return observer.observe(section);\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  });\n\n  const onSideBarItemClick = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\",\n      });\n    }\n  };\n\n  const color = useTheme().theme.colorPalette.primary.accentScale[10];\n  const Highlighted = ({ children }: { children: React.ReactNode }) => {\n    return <span style={{ color: color }}>{children}</span>;\n  };\n\n  /* --------------------------------------------------------------------------------------\n  |                            Data to be displayed                                       |\n  -------------------------------------------------------------------------------------- */\n  const INTRODUCTION_FIRST = (\n    <Text>\n      JSX (JavaScript XML) is a syntax extension for JavaScript commonly used\n      with React, a popular JavaScript library for building user interfaces. JSX\n      allows you to{\" \"}\n      <Highlighted>\n        write HTML-like code within JavaScript, making it easier to create and\n        manage UI components.\n      </Highlighted>{\" \"}\n      Here's a detailed explanation:\n    </Text>\n  );\n  const WHY_USE_JSX_1 = (\n    <Text>\n      Readability: JSX makes it easier to{\" \"}\n      <Highlighted>visualize the structure of the UI</Highlighted> components\n      because it closely resembles HTML.\n    </Text>\n  );\n  const WHY_USE_JSX_2 = (\n    <Text>\n      Integration: It allows you to integrate HTML with{\" \"}\n      <Highlighted>\n        JavaScript seamlessly, enabling dynamic content creation.\n      </Highlighted>\n    </Text>\n  );\n  const BASIC_SYNTAX_3 = (\n    <Text>\n      Attributes: JSX supports HTML attributes like class, id, and style.{\" \"}\n      <Highlighted>\n        You can also use custom attributes and event handlers.\n      </Highlighted>\n    </Text>\n  );\n  const JSX_DIFFERENCES_1 = (\n    <Text>\n      className instead of class: In JSX,{\" \"}\n      <Highlighted>\n        className is used instead of class because class is a reserved keyword\n        in JavaScript.\n      </Highlighted>\n    </Text>\n  );\n  const JSX_EXPRESSION_1 = (\n    <Text>\n      You can include any JavaScript expression within JSX using curly braces {}\n      .{\" \"}\n      <Highlighted>\n        This includes variables, functions, or any valid JavaScript expression.\n      </Highlighted>\n    </Text>\n  );\n  const JSX_ELEMENTS_TYPESAFE = (\n    <Text>\n      JSX is type-safe, meaning it can catch errors during compilation. For\n      instance, if you pass a{\" \"}\n      <Highlighted>\n        number to a component that expects a string, you may get a warning.\n      </Highlighted>\n    </Text>\n  );\n  const JSX_COMPILATION_1 = (\n    <Text>\n      Before JSX can be used in the browser,{\" \"}\n      <Highlighted>\n        it must be compiled to regular JavaScript. This is typically done using\n        a tool like Babel, which transforms JSX into React.createElement()\n        calls.\n      </Highlighted>\n    </Text>\n  );\n\n  /* ------------------------------------------------------------------------------------ */\n\n  if (!isMounted) return <StyledMain>{null}</StyledMain>;\n\n  return (\n    <StyledMain>\n      <StyledTopicContent\n        className={isMounted ? \"fade-in\" : \"\"}\n        style={{ width: mobile ? \"100%\" : \"calc(100% - 12rem\" }}\n      >\n        <StyledSection id=\"introduction\">\n          <StyledSubsection>\n            <Breadcrumbs size=\"small\" color=\"primary\" delimiter=\"/\">\n              <BreadcrumbsItem title=\"Guides\" />\n              <BreadcrumbsItem link=\"/guides/jsx\" title=\"JSX\" />\n            </Breadcrumbs>\n\n            <Text\n              variant=\"paragraph\"\n              size=\"large\"\n              style={{ marginTop: \"1rem\" }}\n            >\n              Introduction\n            </Text>\n            <Text>{INTRODUCTION_FIRST}</Text>\n            <Alert\n              style={{ marginTop: \"0.5rem\" }}\n              color=\"success\"\n              title={\n                <Text noColor size=\"large\">\n                  <b>What is JSX?</b>\n                </Text>\n              }\n              description={\n                <>\n                  <Text noColor>{WHAT_IS_JSX_1}</Text>\n                  <Text noColor>{WHAT_IS_JSX_2}</Text>\n                </>\n              }\n            />\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"why-use-jsx\">\n          <Text size=\"large\">{WHY_USE_JSX_TITLE}</Text>\n          <StyledSubsection>\n            <List variant=\"unordered\" title=\"Here are some features of JSX -\">\n              <ListItem>{WHY_USE_JSX_1}</ListItem>\n              <ListItem>{WHY_USE_JSX_2}</ListItem>\n              <ListItem>{WHY_USE_JSX_3}</ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"jsx-syntax\">\n          <Text size=\"large\">JSX Syntax</Text>\n          <StyledSubsection>\n            <List variant=\"unordered\" title=\"Here is the syntax of JSX -\">\n              <ListItem>\n                <Text>{BASIC_SYNTAX_1}</Text>\n              </ListItem>\n              <ListItem>\n                <Text>{BASIC_SYNTAX_2}</Text>\n              </ListItem>\n              <ListItem>\n                <Text>{BASIC_SYNTAX_3}</Text>\n              </ListItem>\n            </List>\n            <CodeDisplay\n              text={BASIC_SYNTAX_EXAMPLE}\n              language=\"jsx\"\n              style={{ marginTop: \"1rem\" }}\n            />\n            <Text style={{ marginTop: \"1rem\" }}>{BASIC_SYNTAX_LAST}</Text>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"components-and-jsx\">\n          <StyledSubsection>\n            <Text size=\"large\">Components and JSX</Text>\n            <Text>{COMPONENTS_JSX_1}</Text>\n            <CodeDisplay text={COMPONENTS_JSX_1_EXAMPLE} language=\"jsx\" />\n            <Text style={{ marginTop: \"1rem\" }}>{COMPONENTS_JSX_2}</Text>\n            <CodeDisplay text={COMPONENTS_JSX_2_EXAMPLE} language=\"jsx\" />\n            <Text style={{ marginTop: \"1rem\" }}>{COMPONENTS_JSX_3}</Text>\n            <CodeDisplay text={COMPONENTS_JSX_3_EXAMPLE} language=\"jsx\" />\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"jsx-differences\">\n          <StyledSubsection>\n            <Text size=\"large\">JSX Differences from HTML</Text>\n            <List variant=\"unordered\">\n              <ListItem>{JSX_DIFFERENCES_1}</ListItem>\n              <ListItem>{JSX_DIFFERENCES_2}</ListItem>\n              <ListItem>{JSX_DIFFERENCES_3}</ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"jsx-expressions\">\n          <StyledSubsection>\n            <Text size=\"large\">Javascript Expressions in JSX</Text>\n            <List variant=\"unordered\">\n              <ListItem>\n                <Text>{JSX_EXPRESSION_1}</Text>\n                <CodeDisplay\n                  text={JSX_EXPRESSION_EXAMPLE}\n                  language=\"jsx\"\n                  style={{ marginTop: \"1rem\" }}\n                />\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <List\n            variant=\"unordered\"\n            title={<Text size=\"large\">JSX Features</Text>}\n          >\n            <ListItem>\n              <Text>JSX is Type-Safe</Text>\n              <Text style={{ marginTop: \"0.5rem\" }}>\n                {JSX_ELEMENTS_TYPESAFE}\n              </Text>\n            </ListItem>\n            <ListItem style={{ marginTop: \"1rem\" }}>\n              <Text>Fragments in JSX</Text>\n              <Text style={{ marginTop: \"0.5rem\" }}>{FRAGMENTS_1}</Text>\n              <Text>{FRAGMENTS_EXAMPLE}</Text>\n            </ListItem>\n            <ListItem style={{ marginTop: \"1rem\" }}>\n              <Text>Conditional Rendering</Text>\n              <Text style={{ marginTop: \"0.5rem\" }}>\n                {CONDITIONAL_RENDERING_1}\n              </Text>\n              <CodeDisplay\n                text={CONDITIONAL_RENDERING_EXAMPLE}\n                language=\"jsx\"\n                style={{ marginTop: \"1rem\" }}\n              />\n            </ListItem>\n            <ListItem style={{ marginTop: \"1rem\" }}>\n              <Text>Styling in JSX</Text>\n              <Text style={{ marginTop: \"0.5rem\" }}>{STYLING_JSX_1}</Text>\n              <CodeDisplay\n                text={STYLING_JSX_EXAMPLE}\n                language=\"jsx\"\n                style={{ marginTop: \"1rem\" }}\n              />\n            </ListItem>\n            <ListItem style={{ marginTop: \"1rem\" }}>\n              <Text>Event Handling</Text>\n              <Text style={{ marginTop: \"0.5rem\" }}>{EVENT_HANDLING_1}</Text>\n              <CodeDisplay\n                text={EVENT_HANDLING_EXAMPLE}\n                language=\"jsx\"\n                style={{ marginTop: \"1rem\" }}\n              />\n            </ListItem>\n          </List>\n        </StyledSection>\n        <StyledSection id=\"key-points\">\n          <StyledSubsection>\n            <List\n              variant=\"unordered\"\n              title={<Text size=\"large\">Key Points</Text>}\n            >\n              <ListItem>{KEY_POINTS_1}</ListItem>\n              <ListItem>{KEY_POINTS_2}</ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection>\n            <Text size=\"large\">JSX Compilation</Text>\n            <Text>{JSX_COMPILATION_1}</Text>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"conclusion\">\n          <StyledSubsection>\n            <Text size=\"large\">Conclusion</Text>\n            <Text>{CONCLUSION_1}</Text>\n          </StyledSubsection>\n        </StyledSection>\n      </StyledTopicContent>\n      {!mobile && (\n        <SideBar top=\"6rem\" right=\"4rem\">\n          {sections.map((section) => (\n            <SideBarItem\n              size=\"small\"\n              key={section.id}\n              selected={sidebarSelected === section.id}\n              onClick={() => onSideBarItemClick(section.id)}\n            >\n              {section.title}\n            </SideBarItem>\n          ))}\n        </SideBar>\n      )}\n    </StyledMain>\n  );\n};\n\nexport default JSX;\n"],"names":["sections","id","title","JSX","sidebarSelected","setSidebarSelected","React","isMounted","setIsMounted","width","useWindowSize","mobile","observer","IntersectionObserver","entries","entry","isIntersecting","target","threshold","rootMargin","map","section","document","getElementById","forEach","observe","disconnect","color","useTheme","theme","colorPalette","primary","accentScale","Highlighted","_ref","children","_jsx","style","INTRODUCTION_FIRST","_jsxs","Text","WHY_USE_JSX_1","WHY_USE_JSX_2","BASIC_SYNTAX_3","JSX_DIFFERENCES_1","JSX_EXPRESSION_1","JSX_ELEMENTS_TYPESAFE","JSX_COMPILATION_1","StyledMain","StyledTopicContent","className","StyledSection","StyledSubsection","Breadcrumbs","size","delimiter","BreadcrumbsItem","link","variant","marginTop","Alert","noColor","description","_Fragment","List","ListItem","CodeDisplay","text","language","SideBar","top","right","SideBarItem","selected","onClick","element","scrollIntoView","behavior","block","inline","onSideBarItemClick"],"sourceRoot":""}