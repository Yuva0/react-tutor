{"version":3,"file":"static/js/165.ef69c41d.chunk.js","mappings":"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","sources":["content/VirtualDOM.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  Breadcrumbs,\n  BreadcrumbsItem,\n  SideBar,\n  SideBarItem,\n  Text,\n  List,\n  ListItem,\n  useTheme,\n} from \"stelios\";\nimport {\n  StyledMain,\n  StyledSection,\n  StyledSubsection,\n  StyledTopicContent,\n} from \"../components/StyledInternalComponents/StyledInternalComponents\";\nimport { useWindowSize } from \"../helpers/helpers\";\n\nconst sections = [\n  { id: \"introduction\", title: \"Introduction\" },\n  { id: \"tradition-dom\", title: \"Traditional DOM\" },\n  { id: \"what-is-the-virtual-dom\", title: \"What is the Virtual DOM?\" },\n  { id: \"benefits-of-the-virtual-dom\", title: \"Benefits of the Virtual DOM\" },\n  { id: \"conclusion\", title: \"Conclusion\" },\n];\n\nconst VirtualDOM: React.FunctionComponent = () => {\n  const [sidebarSelected, setSidebarSelected] = React.useState(\"introduction\");\n  const [isMounted, setIsMounted] = React.useState(false);\n  const { width } = useWindowSize();\n  const mobile = width < 1200;\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n  React.useEffect(() => {\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n      for (const entry of entries) {\n        if (entry.isIntersecting) {\n          setSidebarSelected(entry.target.id);\n          break;\n        }\n      }\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      threshold: 1,\n      rootMargin: \"64px\",\n    });\n\n    const _sections = sections.map((section) =>\n      document.getElementById(section.id)\n    );\n    _sections.forEach((section) => {\n      if (!section) return;\n      return observer.observe(section);\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  });\n\n  const onSideBarItemClick = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\",\n      });\n    }\n  };\n\n  const color = useTheme().theme.colorPalette.primary.accentScale[10];\n  const Highlighted = ({ children }: { children: React.ReactNode }) => {\n    return <span style={{ color: color }}>{children}</span>;\n  };\n\n  /* --------------------------------------------------------------------------------------\n  |                            Data to be displayed                                       |\n  -------------------------------------------------------------------------------------- */\n  const INTRODUCTION_CONTENT = (\n    <Text>\n      The Virtual DOM (VDOM) is a core concept in React that plays a{\" \"}\n      <Highlighted>\n        significant role in how React efficiently updates the user interface\n        (UI).\n      </Highlighted>{\" \"}\n      Understanding the Virtual DOM requires a basic grasp of how traditional\n      DOM (Document Object Model) manipulation works in web development.\n    </Text>\n  );\n  /* ----------------------------------------------------------------------------------- */\n\n  return (\n    <StyledMain>\n      <StyledTopicContent\n        className={isMounted ? \"fade-in\" : \"\"}\n        style={{ width: mobile ? \"100%\" : \"calc(100% - 12rem\" }}\n      >\n        <StyledSection id=\"introduction\">\n          <StyledSubsection>\n            <Breadcrumbs size=\"small\" delimiter=\"/\">\n              <BreadcrumbsItem title=\"Guides\" />\n              <BreadcrumbsItem link=\"/guides/virtual-dom\" title=\"Virtual DOM\" />\n            </Breadcrumbs>\n            <Text size=\"large\" style={{ marginTop: \"1rem\" }}>\n              Introduction\n            </Text>\n            {INTRODUCTION_CONTENT}\n            <Text>\n              When a component's state changes, the Virtual DOM is updated to\n              reflect the new state. The Virtual DOM is then compared to the\n              actual DOM, and only the differences are applied to the actual\n              DOM. This process is known as reconciliation.\n            </Text>\n            <Text>\n              The Virtual DOM is used by libraries like React to efficiently\n              update the DOM without the need for manual DOM manipulation.\n            </Text>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"traditional-dom\">\n          <Text size=\"large\">Traditional DOM</Text>\n          <StyledSubsection>\n            <Text>\n              The DOM is a{\" \"}\n              <Highlighted>\n                programming interface for web documents,\n              </Highlighted>{\" \"}\n              representing the page's structure as a tree of objects. Each\n              element on the page is a node in this tree. Manipulating the DOM,\n              such as changing an element's content, style, or structure,\n              involves interacting with this tree.\n            </Text>\n            <Text>\n              However, directly manipulating the DOM is slow and inefficient,\n              particularly when dealing with complex UIs or frequent updates.\n              Each change to the DOM triggers a series of steps in the browser,{\" \"}\n              <Highlighted>\n                including recalculating styles, updating the layout, and\n                repainting the page, which can lead to performance bottlenecks.{\" \"}\n              </Highlighted>\n            </Text>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"what-is-the-virtual-dom\">\n          <Text size=\"large\">What is the Virtual DOM?</Text>\n          <StyledSubsection>\n            <Text>\n              The Virtual DOM is an in-memory representation of the real DOM\n              elements generated by React components. It is a lightweight copy\n              of the real DOM, keeping track of the elements and their\n              attributes as a JavaScript object.{\" \"}\n              <Highlighted>\n                The key difference is that the Virtual DOM does not directly\n                interact with the browser.\n              </Highlighted>\n            </Text>\n            <List title=\"Initial Rendering\" variant=\"unordered\">\n              <ListItem>\n                <Text>\n                  When a React application renders for the first time, React\n                  creates a Virtual DOM tree that represents the current state\n                  of the UI.\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  React components are converted into Virtual DOM nodes, and\n                  this tree is compared with the real DOM to update the\n                  browser's UI.\n                </Text>\n              </ListItem>\n            </List>\n            <List title=\"Updating the UI:\">\n              <ListItem>\n                <Text>\n                  When the state or props of a component change,{\" \"}\n                  <Highlighted>\n                    React creates a new Virtual DOM tree representing the\n                    updated UI.\n                  </Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  React then compares this new Virtual DOM tree with the\n                  previous one.{\" \"}\n                  <Highlighted>\n                    This process is known as \"reconciliation.\"\n                  </Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n            <List title=\"Reconciliation\">\n              <ListItem>\n                <Text>\n                  React uses a highly efficient algorithm to compare the new{\" \"}\n                  <Highlighted>Virtual DOM with the previous one.</Highlighted>{\" \"}\n                  This algorithm is known as the \"diffing algorithm.\"\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Instead of re-rendering the entire UI, React identifies the\n                  specific parts of the Virtual DOM that have changed.\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Once React has identified the changes, it updates only those\n                  specific parts of the real DOM, making the update process\n                  <Highlighted>faster and more efficient.</Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n            <List title=\"Batching and Optimization:\">\n              <ListItem>\n                <Text>\n                  React batches updates to reduce the number of changes made to\n                  the DOM. Multiple state updates occurring in a short period\n                  are batched together, leading to{\" \"}\n                  <Highlighted>fewer DOM manipulations.</Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  React's reconciliation process also uses a heuristic called\n                  “keying” to optimize the update process further. When\n                  rendering lists of elements, adding a unique key prop helps\n                  React identify which items have changed, been added, or\n                  removed, allowing for more efficient updates.\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"benefits-of-the-virtual-dom\">\n          <Text size=\"large\">Benefits of the Virtual DOM</Text>\n          <List title=\"Here are the benefits\">\n            <ListItem>\n              <Text>\n                Performance: By minimizing direct interactions with the real\n                DOM,{\" \"}\n                <Highlighted>\n                  React can perform updates much more quickly, leading to\n                  smoother user experiences,\n                </Highlighted>{\" \"}\n                especially in dynamic applications with frequent updates.\n              </Text>\n            </ListItem>\n            <ListItem>\n              <Text>\n                Abstraction: The Virtual DOM abstracts the complexity of manual\n                DOM manipulation, allowing developers to focus on building\n                components and managing state{\" \"}\n                <Highlighted>\n                  without worrying about the underlying DOM operations.\n                </Highlighted>\n              </Text>\n            </ListItem>\n            <ListItem>\n              <Text>\n                Cross-Browser Compatibility: Since React handles the Virtual DOM\n                internally, it also manages differences in how various browsers\n                interact with the DOM,{\" \"}\n                <Highlighted>\n                  making your code more consistent across different\n                  environments.\n                </Highlighted>\n              </Text>\n            </ListItem>\n          </List>\n        </StyledSection>\n        <StyledSection id=\"conclusion\">\n          <Text size=\"large\">Conclusion</Text>\n          <StyledSubsection>\n            <Text>\n              The Virtual DOM is a powerful concept that allows React to update\n              the UI efficiently without the need for direct, frequent\n              interactions with the real DOM. By comparing Virtual DOM trees and\n              updating only the parts that change,{\" \"}\n              <Highlighted>\n                React ensures that applications remain responsive and performant\n              </Highlighted>{\" \"}\n              , even as they grow in complexity.\n            </Text>\n          </StyledSubsection>\n        </StyledSection>\n      </StyledTopicContent>\n      {!mobile && (\n        <SideBar top=\"6rem\" right=\"4rem\">\n          {sections.map((section) => (\n            <SideBarItem\n              size=\"small\"\n              key={section.id}\n              selected={sidebarSelected === section.id}\n              onClick={() => onSideBarItemClick(section.id)}\n            >\n              {section.title}\n            </SideBarItem>\n          ))}\n        </SideBar>\n      )}\n    </StyledMain>\n  );\n};\n\nexport default VirtualDOM;\n"],"names":["sections","id","title","VirtualDOM","sidebarSelected","setSidebarSelected","React","isMounted","setIsMounted","width","useWindowSize","mobile","observer","IntersectionObserver","entries","entry","isIntersecting","target","threshold","rootMargin","map","section","document","getElementById","forEach","observe","disconnect","color","useTheme","theme","colorPalette","primary","accentScale","Highlighted","_ref","children","_jsx","style","INTRODUCTION_CONTENT","_jsxs","Text","StyledMain","StyledTopicContent","className","StyledSection","StyledSubsection","Breadcrumbs","size","delimiter","BreadcrumbsItem","link","marginTop","List","variant","ListItem","SideBar","top","right","SideBarItem","selected","onClick","element","scrollIntoView","behavior","block","inline","onSideBarItemClick"],"sourceRoot":""}