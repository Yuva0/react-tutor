{"version":3,"file":"static/js/166.af788cb2.chunk.js","mappings":";6LAsBA,MAAMA,EAAW,CACf,CAAEC,GAAI,eAAgBC,MAAO,gBAC7B,CAAED,GAAI,cAAeC,MAAO,eAC5B,CAAED,GAAI,WAAYC,MAAO,YACzB,CAAED,GAAI,iBAAkBC,MAAO,kBAC/B,CAAED,GAAI,qBAAsBC,MAAO,uBACnC,CAAED,GAAI,0BAA2BC,MAAO,4BAuZ1C,EAnV2CC,KACzC,MAAOC,EAAiBC,GAAsBC,EAAAA,SAAe,iBACtDC,EAAWC,GAAgBF,EAAAA,UAAe,IAC3C,MAAEG,IAAUC,EAAAA,EAAAA,MACZC,EAASF,EAAQ,KAEvBH,EAAAA,WAAgB,KACdE,GAAa,EAAK,GACjB,IAEH,MAAMI,GAAQC,EAAAA,EAAAA,MAAWC,MAAMC,aAAaC,QAAQC,YAAY,IAC1DC,GAAYL,EAAAA,EAAAA,MAAWC,MAAMC,aAAaI,KAAKF,YAAY,IAC3DG,EAAcC,IAAkD,IAAjD,SAAEC,GAAyCD,EAC9D,OAAOE,EAAAA,EAAAA,KAAA,QAAMC,MAAO,CAAEZ,MAAOA,GAAQU,SAAEA,GAAgB,EAMnDG,GACJC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,kDAC4C,KAChDC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,gDAAyD,kJAKpEM,GACJF,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,EACHC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,cAAuB,wSAOlCO,GACJH,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,EACHC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,sBAA+B,wRAoB1CQ,GACJJ,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACI,SAAO,EAAAT,SAAA,CAAC,sJAGUC,EAAAA,EAAAA,KAAA,UACtBA,EAAAA,EAAAA,KAAA,SAAM,wKAINA,EAAAA,EAAAA,KAAA,SAAM,wPAIgC,KACtCA,EAAAA,EAAAA,KAAA,QAAMC,MAAO,CAAEZ,MAAOM,GAAYI,SAAC,qBAAuB,sBAM9DhB,EAAAA,WAAgB,KACd,MASM0B,EAAW,IAAIC,sBATOC,IAC1B,IAAK,MAAMC,KAASD,EAClB,GAAIC,EAAMC,eAAgB,CACxB/B,EAAmB8B,EAAME,OAAOpC,IAChC,KACF,CACF,GAG4D,CAC5DqC,UAAW,EACXC,WAAY,SAWd,OARkBvC,EAASwC,KAAKC,GAC9BC,SAASC,eAAeF,EAAQxC,MAExB2C,SAASH,IACjB,GAAKA,EACL,OAAOT,EAASa,QAAQJ,EAAQ,IAG3B,KACLT,EAASc,YAAY,CACtB,IAcH,OAAKvC,GAGHmB,EAAAA,EAAAA,MAACqB,EAAAA,GAAU,CAAAzB,SAAA,EACTI,EAAAA,EAAAA,MAACsB,EAAAA,GAAkB,CACjBxB,MAAO,CAAEf,MAAOE,EAAS,OAAS,qBAClCsC,UAAW1C,EAAY,UAAY,GAAGe,SAAA,EAEtCC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAa,CAAA5B,UACZI,EAAAA,EAAAA,MAACyB,EAAAA,GAAgB,CAAClD,GAAG,eAAcqB,SAAA,EACjCI,EAAAA,EAAAA,MAAC0B,EAAAA,GAAW,CAACC,KAAK,QAAQzC,MAAM,UAAU0C,UAAU,IAAGhC,SAAA,EACrDC,EAAAA,EAAAA,KAACgC,EAAAA,GAAe,CAACrD,MAAM,WACvBqB,EAAAA,EAAAA,KAACgC,EAAAA,GAAe,CAACC,KAAK,oBAAoBtD,MAAM,kBAElDqB,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CACJ7C,MAAM,OACN8C,WAAWnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAkB,IAC9BzD,MAAM,WACN0D,YAAa9B,EACbN,MAAO,CAAEqC,UAAW,aAEtBtC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAC0B,KAAK,QAAQ7B,MAAO,CAAEqC,UAAW,UAAWvC,SAAC,iBAGlDG,QAGLF,EAAAA,EAAAA,KAAC2B,EAAAA,GAAa,CAAA5B,UACZI,EAAAA,EAAAA,MAACyB,EAAAA,GAAgB,CAAClD,GAAG,cAAaqB,SAAA,EAChCC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAC0B,KAAK,QAAO/B,SAAC,iBACnBI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,0CACoC,KACxCC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,sCAA+C,QAE9DC,EAAAA,EAAAA,KAACuC,EAAAA,GAAW,CAACC,SAAS,MAAMC,KAxNrB,4HAyNPtC,EAAAA,EAAAA,MAACuC,EAAAA,GAAI,CAACC,QAAQ,YAAW5C,SAAA,EACvBC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,SAAEM,KACXL,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,SAAEO,aAIjBN,EAAAA,EAAAA,KAAC2B,EAAAA,GAAa,CAAA5B,UACZC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAgB,CAAClD,GAAG,WAAUqB,UAC7BI,EAAAA,EAAAA,MAACuC,EAAAA,GAAI,CAACC,QAAQ,UAAUhE,OAAOqB,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAC0B,KAAK,QAAO/B,SAAC,cAAiBA,SAAA,EACjEI,EAAAA,EAAAA,MAACyC,EAAAA,GAAQ,CAAA7C,SAAA,EACPC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,oBACNC,EAAAA,EAAAA,KAACuC,EAAAA,GAAW,CACVtC,MAAO,CAAEqC,UAAW,UACpBE,SAAS,MACTC,KAhOG,uaAkOLzC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACH,MAAO,CAAEqC,UAAW,QAASvC,SAjNzB,iGAqNZI,EAAAA,EAAAA,MAACyC,EAAAA,GAAQ,CAAC3C,MAAO,CAAEqC,UAAW,UAAWvC,SAAA,EACvCC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,0BACNC,EAAAA,EAAAA,KAACuC,EAAAA,GAAW,CACVtC,MAAO,CAAEqC,UAAW,UACpBE,SAAS,MACTC,KAzNG,mZA2NLzC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACH,MAAO,CAAEqC,UAAW,QAASvC,SA3MzB,mMA+MZI,EAAAA,EAAAA,MAACyC,EAAAA,GAAQ,CAAC3C,MAAO,CAAEqC,UAAW,UAAWvC,SAAA,EACvCC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,yBACNC,EAAAA,EAAAA,KAACuC,EAAAA,GAAW,CACVtC,MAAO,CAAEqC,UAAW,UACpBE,SAAS,MACTC,KAlNG,2hBAoNLzC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACH,MAAO,CAAEqC,UAAW,QAASvC,SAhMzB,2JAuMlBC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAa,CAAA5B,UACZC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAgB,CAAClD,GAAG,iBAAgBqB,UACnCI,EAAAA,EAAAA,MAACuC,EAAAA,GAAI,CACHC,QAAQ,YACRhE,OAAOqB,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAC0B,KAAK,QAAO/B,SAAC,mBAAsBA,SAAA,EAEhDC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,EACHC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,iCAA0C,gNAO3DC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,EACHC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,qCAA+C,IAAI,+EAQ1EC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAa,CAAA5B,UACZC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAgB,CAAClD,GAAG,qBAAoBqB,UACvCI,EAAAA,EAAAA,MAACuC,EAAAA,GAAI,CACHC,QAAQ,YACRhE,OAAOqB,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAC0B,KAAK,QAAO/B,SAAC,wBAA2BA,SAAA,EAErDI,EAAAA,EAAAA,MAACyC,EAAAA,GAAQ,CAAA7C,SAAA,EACPC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,mBACNI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,yBACmB,KACvBC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,2BAAoC,sDAIrDI,EAAAA,EAAAA,MAACyC,EAAAA,GAAQ,CAAA7C,SAAA,EACPC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,8BACNI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,8CACwC,KAC5CC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,uDAEE,IAAI,oGAIrBI,EAAAA,EAAAA,MAACuC,EAAAA,GAAI,CAAC/D,MAAM,SAASkE,eAAgB,CAAEP,UAAW,UAAWvC,SAAA,EAC3DC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,EACHC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,iCAA2C,IAAI,2HAMhEC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,EACHC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,yBAAkC,+HAKnDI,EAAAA,EAAAA,MAACyC,EAAAA,GAAQ,CAAA7C,SAAA,EACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,EACHC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,cAAuB,8JAKtCC,EAAAA,EAAAA,KAACuC,EAAAA,GAAW,CACVtC,MAAO,CAAEqC,UAAW,UACpBG,KAlOO,yVAmOPD,SAAS,yBAKjBxC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAC3C,MAAO,CAAEqC,UAAW,WAAYvC,UACxCC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,iCAERC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,SAAC,+CACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,SAAC,oBAIhBI,EAAAA,EAAAA,MAACwB,EAAAA,GAAa,CAAA5B,SAAA,EACZC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAgB,CAAClD,GAAG,0BAAyBqB,UAC5CI,EAAAA,EAAAA,MAACuC,EAAAA,GAAI,CAAC/D,OAAOqB,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAC0B,KAAK,QAAO/B,SAAC,4BAA+BA,SAAA,EAC7DC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,YACIC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,qBAA8B,0CAIvDC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,QACAC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,sBAA+B,yDAIpDC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,SAAC,yEAIVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAAA7C,UACPI,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,CAAC,yCACmC,KACvCC,EAAAA,EAAAA,KAACH,EAAW,CAAAE,SAAC,uCAKrBC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAgB,CAAA7B,UACfC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAL,SAAC,4LAQVX,IACAY,EAAAA,EAAAA,KAAC8C,EAAAA,GAAO,CAACC,IAAI,OAAOC,MAAM,OAAMjD,SAC7BtB,EAASwC,KAAKC,IACblB,EAAAA,EAAAA,KAACiD,EAAAA,GAAW,CACVnB,KAAK,QAELoB,SAAUrE,IAAoBqC,EAAQxC,GACtCyE,QAASA,IA9NOzE,KAC1B,MAAM0E,EAAUjC,SAASC,eAAe1C,GACpC0E,GACFA,EAAQC,eAAe,CACrBC,SAAU,SACVC,MAAO,QACPC,OAAQ,WAEZ,EAsNyBC,CAAmBvC,EAAQxC,IAAIqB,SAE7CmB,EAAQvC,OAJJuC,EAAQxC,YAjNFsB,EAAAA,EAAAA,KAACwB,EAAAA,GAAU,CAAAzB,SAAE,MA0NrB,uCC9aFqC,GAAAsB,UAAAA,GAAqB,UAAW,mBAAoB,qBAAsB,CAAC,CAAC,OAAO,CAAC,EAAI,6CAA6C,IAAM,UAAU,CAAC,OAAO,CAAC,EAAI,8BAA8B,IAAM,UAAU,CAAC,OAAO,CAAC,EAAI,WAAW,IAAM,UAAU,CAAC,OAAO,CAAC,EAAI,aAAa,IAAM,UAAU,CAAC,OAAO,CAAC,EAAI,YAAY,IAAM,UAAU,CAAC,OAAO,CAAC,EAAI,aAAa,IAAM","sources":["content/UseEffect.tsx","../node_modules/@tabler/icons-react/src/icons/IconMoodSmileDizzy.ts"],"sourcesContent":["import * as React from \"react\";\nimport {\n  StyledMain,\n  StyledSection,\n  StyledSubsection,\n  StyledTopicContent,\n} from \"../components/StyledInternalComponents/StyledInternalComponents\";\nimport {\n  Breadcrumbs,\n  BreadcrumbsItem,\n  Text,\n  CodeDisplay,\n  List,\n  ListItem,\n  SideBar,\n  SideBarItem,\n  useTheme,\n  Alert,\n} from \"stelios\";\nimport { IconMoodSmileDizzy } from \"@tabler/icons-react\";\nimport { useWindowSize } from \"../helpers/helpers\";\n\nconst sections = [\n  { id: \"introduction\", title: \"Introduction\" },\n  { id: \"basic-usage\", title: \"Basic Usage\" },\n  { id: \"examples\", title: \"Examples\" },\n  { id: \"rules-of-hooks\", title: \"Rules of Hooks\" },\n  { id: \"common-side-effect\", title: \"Common Side Effects\" },\n  { id: \"tips-and-best-practices\", title: \"Tips and Best Practices\" },\n];\n\nconst BASIC_USAGE_1 = `useEffect(() => {\n  // Side effect code here\n  return () => {\n    // Cleanup code here\n  };\n}, [dependencies]);\n`;\nconst BASIC_EXAMPLE_1 = `import React, { useEffect, useState } from 'react';\n\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = \\`You clicked \\${count} times\\`;\n  }, [count]); // Only re-run the effect if count changes\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\n`;\nconst BASIC_EXAMPLE_1_TEXT = `In this example, the effect updates the document title whenever the count state changes.`;\nconst BASIC_EXAMPLE_2 = `import React, { useEffect, useState } from 'react';\n\nfunction Timer() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n\n    return () => clearInterval(interval); // Cleanup interval on unmount\n  }, []); // Empty array ensures the effect runs only once\n\n  return <div>{count}</div>;\n}\n`;\nconst BASIC_EXAMPLE_2_TEXT = `Here, we start an interval that updates the count every second. The cleanup function (clearInterval) ensures the interval is cleared when the component unmounts, preventing memory leaks.`;\n\nconst BASIC_EXAMPLE_3 = `import React, { useEffect, useState } from 'react';\n\nfunction FetchData() {\n  const [data, setData] = useState(null);\n  const [id, setId] = useState(1);\n\n  useEffect(() => {\n    fetch(\\`https://jsonplaceholder.typicode.com/posts/\\${id}\\`)\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, [id]); // Fetch data only when \\`id\\` changes\n\n  return (\n    <div>\n      <button onClick={() => setId(id + 1)}>Next Post</button>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n`;\nconst BASIC_EXAMPLE_3_TEXT = `This effect fetches data from an API whenever the id state changes. The dependency array [id] ensures the effect runs only when id changes.`;\n\nconst UseEffect: React.FunctionComponent = () => {\n  const [sidebarSelected, setSidebarSelected] = React.useState(\"introduction\");\n  const [isMounted, setIsMounted] = React.useState(false);\n  const { width } = useWindowSize();\n  const mobile = width < 1200;\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  const color = useTheme().theme.colorPalette.primary.accentScale[10];\n  const infoColor = useTheme().theme.colorPalette.info.accentScale[10];\n  const Highlighted = ({ children }: { children: React.ReactNode }) => {\n    return <span style={{ color: color }}>{children}</span>;\n  };\n\n  /* --------------------------------------------------------------------------------------\n  |                            Data to be displayed                                       |\n  -------------------------------------------------------------------------------------- */\n  const INTRODUCTION_CONTENT = (\n    <Text>\n      useEffect is a Hook in React that allows you to{\" \"}\n      <Highlighted>perform side effects in function components</Highlighted>. It\n      serves a similar purpose to lifecycle methods like componentDidMount,\n      componentDidUpdate, and componentWillUnmount in class components.\n    </Text>\n  );\n  const BASIC_USAGE_FN = (\n    <Text>\n      <Highlighted>Function:</Highlighted> This is the effect function where you\n      write the side effect code. This function can optionally return a cleanup\n      function, which is used to clean up the effect (like removing event\n      listeners or canceling network requests) before the component is unmounted\n      or before the effect runs again.`;\n    </Text>\n  );\n  const BASIC_USAGE_DEP = (\n    <Text>\n      <Highlighted>Dependency Array:</Highlighted> This is an array of values\n      that the effect depends on. The effect will only run when one or more of\n      these values change. If you omit this array, the effect will run after\n      every render. If you pass an empty array, the effect will run only once,\n      similar to componentDidMount.\n    </Text>\n  );\n  const SUBSCRIPTIONS_EXAMPLE = `useEffect(() => {\n  const socket = new WebSocket('wss://example.com/socket');\n\n  socket.addEventListener('message', (event) => {\n    setMessage(event.data); // Handle incoming data\n  });\n\n  return () => {\n    socket.close(); // Clean up the subscription\n  };\n}, []); // Empty array means this effect runs only on mount and unmount\n`;\n\n  const ALERT_DESCRIPTION = (\n    <Text noColor>\n      useEffect is inspired by React's class component lifecycle methods,\n      specifically componentDidMount, componentDidUpdate, and\n      componentWillUnmount. <br />\n      <br />\n      However, unlike class components, useEffect merges these three lifecycle\n      phases into a single, versatile hook that can handle side effects before\n      and after renders.\n      <br />\n      This means with useEffect, you can manage side effects in one place,\n      making functional components more powerful and concise than class\n      components, which required separate methods for these tasks. This is why\n      useEffect is often referred to as the{\" \"}\n      <span style={{ color: infoColor }}>Swiss Army knife</span> of React hooks!\n    </Text>\n  );\n\n  /* ------------------------------------------------------------------------------------ */\n\n  React.useEffect(() => {\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n      for (const entry of entries) {\n        if (entry.isIntersecting) {\n          setSidebarSelected(entry.target.id);\n          break;\n        }\n      }\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      threshold: 1,\n      rootMargin: \"64px\",\n    });\n\n    const _sections = sections.map((section) =>\n      document.getElementById(section.id)\n    );\n    _sections.forEach((section) => {\n      if (!section) return;\n      return observer.observe(section);\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  });\n\n  const onSideBarItemClick = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\",\n      });\n    }\n  };\n\n  if (!isMounted) return <StyledMain>{null}</StyledMain>;\n\n  return (\n    <StyledMain>\n      <StyledTopicContent\n        style={{ width: mobile ? \"100%\" : \"calc(100% - 12rem\" }}\n        className={isMounted ? \"fade-in\" : \"\"}\n      >\n        <StyledSection>\n          <StyledSubsection id=\"introduction\">\n            <Breadcrumbs size=\"small\" color=\"primary\" delimiter=\"/\">\n              <BreadcrumbsItem title=\"Hooks\" />\n              <BreadcrumbsItem link=\"/hooks/use-effect\" title=\"useEffect\" />\n            </Breadcrumbs>\n            <Alert\n              color=\"info\"\n              titleIcon={<IconMoodSmileDizzy />}\n              title=\"Fun Fact\"\n              description={ALERT_DESCRIPTION}\n              style={{ marginTop: \"0.5rem\" }}\n            />\n            <Text size=\"large\" style={{ marginTop: \"0.5rem\" }}>\n              Introduction\n            </Text>\n            {INTRODUCTION_CONTENT}\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection id=\"basic-usage\">\n            <Text size=\"large\">Basic Usage</Text>\n            <Text>\n              The useEffect hook takes two arguments:{\" \"}\n              <Highlighted>a function and a dependency array</Highlighted>.\n            </Text>\n            <CodeDisplay language=\"JSX\" text={BASIC_USAGE_1} />\n            <List variant=\"unordered\">\n              <ListItem>{BASIC_USAGE_FN}</ListItem>\n              <ListItem>{BASIC_USAGE_DEP}</ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection id=\"examples\">\n            <List variant=\"ordered\" title={<Text size=\"large\">Examples:</Text>}>\n              <ListItem>\n                <Text>Basic Example:</Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"JSX\"\n                  text={BASIC_EXAMPLE_1}\n                />\n                <Text style={{ marginTop: \"1rem\" }}>\n                  {BASIC_EXAMPLE_1_TEXT}\n                </Text>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.5rem\" }}>\n                <Text>Effect with Cleanup:</Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"JSX\"\n                  text={BASIC_EXAMPLE_2}\n                />\n                <Text style={{ marginTop: \"1rem\" }}>\n                  {BASIC_EXAMPLE_2_TEXT}\n                </Text>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.5rem\" }}>\n                <Text>Conditional Effect:</Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"JSX\"\n                  text={BASIC_EXAMPLE_3}\n                />\n                <Text style={{ marginTop: \"1rem\" }}>\n                  {BASIC_EXAMPLE_3_TEXT}\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection id=\"rules-of-hooks\">\n            <List\n              variant=\"unordered\"\n              title={<Text size=\"large\">Rules of Hooks</Text>}\n            >\n              <ListItem>\n                <Text>\n                  <Highlighted>Call Hooks at the Top Level:</Highlighted> Don't\n                  call hooks inside loops, conditions, or nested functions.\n                  Always use hooks at the top level of your React function so\n                  that the hooks are called in the same order each time a\n                  component renders.\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  <Highlighted>Call Hooks from React Functions:</Highlighted>{\" \"}\n                  Only call hooks from React function components or custom\n                  hooks.\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection id=\"common-side-effect\">\n            <List\n              variant=\"unordered\"\n              title={<Text size=\"large\">Common Side Effects</Text>}\n            >\n              <ListItem>\n                <Text>Data fetching</Text>\n                <Text>\n                  Typically, you want to{\" \"}\n                  <Highlighted>fetch data from an API</Highlighted> and update\n                  the state with the fetched data.\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>Setting up subscriptions</Text>\n                <Text>\n                  You can create a connection or subscription{\" \"}\n                  <Highlighted>\n                    (like a WebSocket, event listener, or data stream)\n                  </Highlighted>{\" \"}\n                  when a component mounts and cleaning it up when the component\n                  unmounts or dependencies change\n                </Text>\n                <List title=\"Steps:\" containerStyle={{ marginTop: \"0.5rem\" }}>\n                  <ListItem>\n                    <Text>\n                      <Highlighted>Initialize the Subscription:</Highlighted>{\" \"}\n                      Inside the useEffect, set up the subscription, such as\n                      opening a WebSocket connection or adding an event\n                      listener.\n                    </Text>\n                  </ListItem>\n                  <ListItem>\n                    <Text>\n                      <Highlighted>Handle Data/Updates:</Highlighted> Define a\n                      function within the useEffect to handle incoming data or\n                      events, updating the component's state accordingly.\n                    </Text>\n                  </ListItem>\n                  <ListItem>\n                    <Text>\n                      <Highlighted>Clean Up:</Highlighted> Return a cleanup\n                      function from useEffect to close the connection or remove\n                      the event listener when the component unmounts or when\n                      dependencies change.\n                    </Text>\n                    <CodeDisplay\n                      style={{ marginTop: \"0.5rem\" }}\n                      text={SUBSCRIPTIONS_EXAMPLE}\n                      language=\"javascript\"\n                    />\n                  </ListItem>\n                </List>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.25rem\" }}>\n                <Text>Manually changing the DOM</Text>\n              </ListItem>\n              <ListItem>Timers (e.g., setTimeout and setInterval)</ListItem>\n              <ListItem>Logging</ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection id=\"tips-and-best-practices\">\n            <List title={<Text size=\"large\">Tips And Best Practices</Text>}>\n              <ListItem>\n                <Text>\n                  Use the <Highlighted>dependency array</Highlighted> to control\n                  when the effect runs.\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Use <Highlighted>cleanup functions</Highlighted> to prevent\n                  memory leaks and clean up resources.\n                </Text>\n              </ListItem>\n              <ListItem>\n                Be mindful of the dependencies you include in the dependency\n                array.\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Avoid using the dependency array as an{\" \"}\n                  <Highlighted>optimization technique.</Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n          <StyledSubsection>\n            <Text>\n              By understanding and using useEffect properly, you can manage side\n              effects in your React components effectively and ensure they\n              behave as expected throughout their lifecycle.\n            </Text>\n          </StyledSubsection>\n        </StyledSection>\n      </StyledTopicContent>\n      {!mobile && (\n        <SideBar top=\"6rem\" right=\"4rem\">\n          {sections.map((section) => (\n            <SideBarItem\n              size=\"small\"\n              key={section.id}\n              selected={sidebarSelected === section.id}\n              onClick={() => onSideBarItemClick(section.id)}\n            >\n              {section.title}\n            </SideBarItem>\n          ))}\n        </SideBar>\n      )}\n    </StyledMain>\n  );\n};\n\nexport default UseEffect;\n","import createReactComponent from '../createReactComponent';\nexport default createReactComponent('outline', 'mood-smile-dizzy', 'IconMoodSmileDizzy', [[\"path\",{\"d\":\"M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0\",\"key\":\"svg-0\"}],[\"path\",{\"d\":\"M14.5 15a3.5 3.5 0 0 1 -5 0\",\"key\":\"svg-1\"}],[\"path\",{\"d\":\"M8 9l2 2\",\"key\":\"svg-2\"}],[\"path\",{\"d\":\"M10 9l-2 2\",\"key\":\"svg-3\"}],[\"path\",{\"d\":\"M14 9l2 2\",\"key\":\"svg-4\"}],[\"path\",{\"d\":\"M16 9l-2 2\",\"key\":\"svg-5\"}]]);"],"names":["sections","id","title","UseEffect","sidebarSelected","setSidebarSelected","React","isMounted","setIsMounted","width","useWindowSize","mobile","color","useTheme","theme","colorPalette","primary","accentScale","infoColor","info","Highlighted","_ref","children","_jsx","style","INTRODUCTION_CONTENT","_jsxs","Text","BASIC_USAGE_FN","BASIC_USAGE_DEP","ALERT_DESCRIPTION","noColor","observer","IntersectionObserver","entries","entry","isIntersecting","target","threshold","rootMargin","map","section","document","getElementById","forEach","observe","disconnect","StyledMain","StyledTopicContent","className","StyledSection","StyledSubsection","Breadcrumbs","size","delimiter","BreadcrumbsItem","link","Alert","titleIcon","IconMoodSmileDizzy","description","marginTop","CodeDisplay","language","text","List","variant","ListItem","containerStyle","SideBar","top","right","SideBarItem","selected","onClick","element","scrollIntoView","behavior","block","inline","onSideBarItemClick","createReactComponent"],"sourceRoot":""}