"use strict";(self.webpackChunkcstutor=self.webpackChunkcstutor||[]).push([[928],{3928:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var s=n(5043),o=n(1290),r=n(4306),i=n(7987),a=n(579);const c=[{id:"what-is-context",title:"What is Context?"},{id:"creating-context",title:"Creating Context"},{id:"using-the-context",title:"Using the context with useContext"},{id:"how-use-context-works",title:"How useContext works?"},{id:"best-practices",title:"Best Practices"},{id:"examples-with-multiple-contexts",title:"Examples with Multiple Contexts"},{id:"context-vs-props",title:"Context vs Props"}],l=()=>{const[e,t]=s.useState("introduction"),[n,l]=s.useState(!1),{width:d}=(0,i.lW)(),h=d<1200;s.useEffect((()=>{l(!0)}),[]),s.useEffect((()=>{const e=new IntersectionObserver((e=>{for(const n of e)if(n.isIntersecting){t(n.target.id);break}}),{threshold:1,rootMargin:"64px"});return c.map((e=>document.getElementById(e.id))).forEach((t=>{if(t)return e.observe(t)})),()=>{e.disconnect()}}));const x=(0,r.DP)().theme.colorPalette.primary.accentScale[10],u=e=>{let{children:t}=e;return(0,a.jsx)("span",{style:{color:x},children:t})},m=(0,a.jsxs)(r.EY,{children:["In React, the Context API is a mechanism for passing data through the component tree without having to pass props down manually at every level. It's useful for"," ",(0,a.jsx)(u,{children:"sharing global data such as user information, themes, or settings that many components might need."})]});return n?(0,a.jsxs)(o.Hk,{children:[(0,a.jsxs)(o._f,{style:{width:h?"100%":"calc(100% - 12rem"},className:n?"fade-in":"",children:[(0,a.jsx)(o.PZ,{id:"what-is-context",children:(0,a.jsxs)(o.db,{children:[(0,a.jsxs)(r.BI,{size:"small",color:"primary",delimiter:"/",children:[(0,a.jsx)(r.yd,{title:"Hooks"}),(0,a.jsx)(r.yd,{link:"/hooks/use-context",title:"useContext"})]}),(0,a.jsx)(r.EY,{size:"large",style:{marginTop:"1rem"},children:"What is context?"}),m]})}),(0,a.jsx)(o.PZ,{id:"creating-context",children:(0,a.jsxs)(o.db,{children:[(0,a.jsx)(r.EY,{size:"large",children:"Creating Context"}),(0,a.jsxs)(r.B8,{title:(0,a.jsxs)(r.EY,{children:["Before you can use the useContext hook, you need to create a"," ",(0,a.jsx)(u,{children:"Context object using React.createContext."})," ","This object will include two key components:"]}),children:[(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:[(0,a.jsx)(u,{children:"Provider:"})," A component that holds the context's value and provides it to its descendant components."]})}),(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:[(0,a.jsx)(u,{children:"Consumer:"})," A component that subscribes to context changes and uses the context value."]})})]}),(0,a.jsx)(r.EY,{children:"Example"}),(0,a.jsx)(r.sY,{language:"javascript",text:"import React, { createContext, useState } from 'react';\n\n// Create a Context with a default value\nconst MyContext = createContext(defaultValue);\n\nconst MyProvider = ({ children }) => {\n  const [value, setValue] = useState('some value');\n\n  return (\n    <MyContext.Provider value={{ value, setValue }}>\n      {children}\n    </MyContext.Provider>\n  );\n};\n"})]})}),(0,a.jsxs)(o.PZ,{id:"using-the-context",children:[(0,a.jsx)(r.EY,{size:"large",children:"Using the Context with useContext"}),(0,a.jsxs)(r.EY,{children:["The useContext hook allows you to access the context value from the"," ",(0,a.jsx)(u,{children:"nearest Provider component in the component tree."})]}),(0,a.jsx)(r.EY,{children:"Syntax"}),(0,a.jsx)(r.sY,{language:"javascript",text:"const contextValue = useContext(MyContext);"}),(0,a.jsx)(r.EY,{style:{marginTop:"0.5rem"},children:"Example"}),(0,a.jsx)(r.sY,{language:"javascript",text:"import React, { useContext } from 'react';\nimport MyContext from './MyContext'; // Import the context object\n\nconst MyComponent = () => {\n  // Access the context value\n  const { value, setValue } = useContext(MyContext);\n\n  return (\n    <div>\n      <p>Value from context: {value}</p>\n      <button onClick={() => setValue('new value')}>Change Value</button>\n    </div>\n  );\n};\n"})]}),(0,a.jsx)(o.PZ,{id:"how-use-context-works",children:(0,a.jsxs)(o.db,{children:[(0,a.jsx)(r.EY,{size:"large",children:"How useContext works?"}),(0,a.jsxs)(r.EY,{children:["When you call useContext(MyContext) in a component, it reads the context value from the nearest Provider component in the component tree."," ",(0,a.jsx)(u,{children:"The useContext hook will re-render the component when the context value changes."})]}),(0,a.jsxs)(r.B8,{children:[(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:["Context Creation: First, you create a Context object using createContext."," ",(0,a.jsx)(u,{children:"This provides a Provider and a Consumer."})]})}),(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:["Provider Component: You wrap your component tree with the Provider component from the context. The value prop on the Provider"," ",(0,a.jsx)(u,{children:"specifies the value that will be available to all descendants."})]})}),(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:["Using useContext: Within a descendant component, you use the useContext hook to access the context's value."," ",(0,a.jsx)(u,{children:"This hook will return the current context value."})]})}),(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:["Reactivity: When the value provided by the Provider changes, all components using"," ",(0,a.jsx)(u,{children:"useContext will automatically re-render to reflect the updated value."})]})})]})]})}),(0,a.jsx)(o.PZ,{id:"best-practices",children:(0,a.jsx)(o.db,{children:(0,a.jsxs)(r.B8,{title:(0,a.jsx)(r.EY,{size:"large",children:"Best Practices"}),variant:"unordered",children:[(0,a.jsx)(r.ck,{children:(0,a.jsx)(r.EY,{children:"Default Values: Provide a default value when creating the context to ensure that your components have a fallback if they're used outside of a Provider."})}),(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:["Minimal State in Context: Only put the minimal required state in context to avoid unnecessary re-renders. For more complex state management, consider using"," ",(0,a.jsx)(u,{children:"state management libraries."})]})}),(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:["Separate Contexts: Create separate contexts for different pieces of state or different parts of your application to"," ",(0,a.jsx)(u,{children:"maintain clarity and modularity."})]})})]})})}),(0,a.jsx)(o.PZ,{children:(0,a.jsxs)(o.db,{id:"examples-with-multiple-contexts",children:[(0,a.jsx)(r.EY,{size:"large",children:"Examples with Multiple Contexts"}),(0,a.jsx)(r.EY,{children:"You can use multiple contexts in a single component by nesting multiple Provider components. Each Provider will provide a different context value to its descendants."}),(0,a.jsx)(r.sY,{style:{marginTop:"0.25rem"},language:"javascript",text:"const UserContext = createContext(null);\nconst ThemeContext = createContext('light');\n\nconst App = () => {\n  return (\n    <UserContext.Provider value={/* user data */}>\n      <ThemeContext.Provider value={/* theme data */}>\n        <MyComponent />\n      </ThemeContext.Provider>\n    </UserContext.Provider>\n  );\n};\n\nconst MyComponent = () => {\n  const user = useContext(UserContext);\n  const theme = useContext(ThemeContext);\n\n  return (\n    <div style={{ color: theme === 'dark' ? 'white' : 'black' }}>\n      {user ? `Hello, ${user.name}` : 'Please log in'}\n    </div>\n  );\n};\n"})]})}),(0,a.jsx)(o.PZ,{children:(0,a.jsxs)(o.db,{id:"context-vs-props",children:[(0,a.jsx)(r.EY,{size:"large",children:"Context vs Props"}),(0,a.jsxs)(r.B8,{title:(0,a.jsx)(r.EY,{children:"Context is useful for passing data that is needed by many components in your application. It's a way to avoid prop drilling and make your code cleaner and more maintainable."}),children:[(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:["Context: Use context when you have data that needs to be"," ",(0,a.jsx)(u,{children:"accessed by many components at different levels of the component"})," ","tree."]})}),(0,a.jsx)(r.ck,{children:(0,a.jsxs)(r.EY,{children:["Props: Use props when you have data that is only needed by a"," ",(0,a.jsx)(u,{children:"single component or a few components."})]})})]}),(0,a.jsx)(r.EY,{style:{marginTop:"0.5rem"},children:"By using useContext, you simplify the process of accessing and managing global state in your React applications."})]})})]}),!h&&(0,a.jsx)(r.Sr,{top:"6rem",right:"4rem",children:c.map((t=>(0,a.jsx)(r.WW,{size:"small",selected:e===t.id,onClick:()=>(e=>{const t=document.getElementById(e);t&&t.scrollIntoView({behavior:"smooth",block:"start",inline:"nearest"})})(t.id),children:t.title},t.id)))})]}):(0,a.jsx)(o.Hk,{children:null})}}}]);
//# sourceMappingURL=928.e9819c49.chunk.js.map