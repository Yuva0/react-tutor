{"version":3,"file":"static/js/47.12481bb9.chunk.js","mappings":"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","sources":["content/UseMemo.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  StyledMain,\n  StyledSection,\n  StyledSubsection,\n  StyledTopicContent,\n} from \"../components/StyledInternalComponents/StyledInternalComponents\";\nimport {\n  Breadcrumbs,\n  BreadcrumbsItem,\n  Text,\n  CodeDisplay,\n  List,\n  ListItem,\n  SideBar,\n  SideBarItem,\n  useTheme,\n} from \"stelios\";\nimport { useWindowSize } from \"../helpers/helpers\";\n\nconst sections = [\n  { id: \"introduction\", title: \"Introduction\" },\n  { id: \"detailed-breakdown\", title: \"Detailed Breakdown\" },\n  { id: \"practical-use-cases\", title: \"Practical Use Cases\" },\n  { id: \"conclusion\", title: \"Conclusion\" },\n];\n\nconst SYNTAX_EXAMPlE = `const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n`;\nconst PURPOSE_EXAMPLE = `import React, { useState, useMemo } from 'react';\n\nfunction ExpensiveComponent({ a, b }) {\n  const expensiveCalculation = (a, b) => {\n    console.log('Calculating...');\n    return a + b;\n  };\n\n  const memoizedValue = useMemo(() => expensiveCalculation(a, b), [a, b]);\n\n  return <div>{memoizedValue}</div>;\n}\n`;\nconst FN_EXECUTION = `The function passed to useMemo is executed during the initial render and every subsequent render if any of the dependencies change. If none of the dependencies change, the previously returned value is used.`;\nconst DEPENDENCY_ARRAY = `The dependency array [a, b] determines when the memoized value should be recomputed. If a or b changes, the function is executed again; otherwise, the cached value is returned.`;\nconst MEMOIZATION = `Memoization is a performance optimization technique where the result of an expensive function call is stored, and the cached result is returned when the same inputs occur again.`;\nconst MEMOIZED_CALLBACK = `const memoizedCallback = useCallback(() => {\n  doSomething(a, b);\n}, [a, b]);\n`;\nconst COMPLEX_CALCULATION = `const sortedList = useMemo(() => {\n  return list.sort((a, b) => a.value - b.value);\n}, [list]);\n`;\nconst MEMOIZED_OPTION = `const memoizedOptions = useMemo(() => {\n  return [{ value: 1 }, { value: 2 }];\n}, []);\n`;\nconst COMP_PERFORMANCE = `const renderedItems = useMemo(() => {\n  return items.map(item => <Item key={item.id} {...item} />);\n}, [items]);\n`;\n\nconst UseMemo = () => {\n  const [sidebarSelected, setSidebarSelected] = React.useState(\"introduction\");\n  const [isMounted, setIsMounted] = React.useState(false);\n  const { width } = useWindowSize();\n  const mobile = width < 1200;\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n  React.useEffect(() => {\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n      for (const entry of entries) {\n        if (entry.isIntersecting) {\n          setSidebarSelected(entry.target.id);\n          break;\n        }\n      }\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      threshold: 1,\n      rootMargin: \"64px\",\n    });\n\n    const _sections = sections.map((section) =>\n      document.getElementById(section.id)\n    );\n    _sections.forEach((section) => {\n      if (!section) return;\n      return observer.observe(section);\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  });\n\n  const color = useTheme().theme.colorPalette.primary.accentScale[10];\n  const Highlighted = ({ children }: { children: React.ReactNode }) => {\n    return <span style={{ color: color }}>{children}</span>;\n  };\n\n  /* --------------------------------------------------------------------------------------\n    |                            Data to be displayed                                       |\n    -------------------------------------------------------------------------------------- */\n  const INTRODUCTION_CONTENT = (\n    <Text>\n      useMemo is a hook in React that allows you to memoize the result of a\n      computation,{\" \"}\n      <Highlighted>\n        preventing unnecessary recalculations and improving performance\n      </Highlighted>\n      . Here's a detailed explanation:\n    </Text>\n  );\n  const PURPOSE_CONTENT = (\n    <Text>\n      useMemo is used to optimize performance by{\" \"}\n      <Highlighted>avoiding expensive calculations on every render</Highlighted>\n      . If the dependencies have not changed since the last render, useMemo\n      returns the previously computed value, effectively caching the result.\n    </Text>\n  );\n  const CONCLUSION = (\n    <Text>\n      useMemo is a powerful tool in React for optimizing performance by\n      memoizing expensive calculations and ensuring referential equality of\n      complex objects and arrays. By understanding and properly using useMemo,\n      you can create more efficient React applications,{\" \"}\n      <Highlighted>\n        especially when dealing with complex state and computational logic.\n      </Highlighted>\n    </Text>\n  );\n\n  /* ------------------------------------------------------------------------------------ */\n\n  const onSideBarItemClick = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\",\n      });\n    }\n  };\n\n  if (!isMounted) return <StyledMain>{null}</StyledMain>;\n  return (\n    <StyledMain>\n      <StyledTopicContent\n        style={{ width: mobile ? \"100%\" : \"calc(100% - 12rem\" }}\n        className={isMounted ? \"fade-in\" : \"\"}\n      >\n        <StyledSection id=\"introduction\">\n          <StyledSubsection>\n            <Breadcrumbs size=\"small\" color=\"primary\" delimiter=\"/\">\n              <BreadcrumbsItem title=\"Hooks\" />\n              <BreadcrumbsItem link=\"/hooks/use-memo\" title=\"useMemo\" />\n            </Breadcrumbs>\n            <Text size=\"large\" style={{ marginTop: \"1rem\" }}>\n              Introduction\n            </Text>\n            {INTRODUCTION_CONTENT}\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection>\n            <Text size=\"large\">Syntax</Text>\n            <CodeDisplay text={SYNTAX_EXAMPlE} language=\"javascript\" />\n            <List\n              title={\n                <Text style={{ marginTop: \"1rem\" }}>\n                  `useMemo` takes two arguments:\n                </Text>\n              }\n            >\n              <ListItem>\n                <Text>\n                  A function that <Highlighted>computes a value</Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  A dependency array that lists variables which, when changed,\n                  cause the{\" \"}\n                  <Highlighted>function to recompute the value</Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection>\n            <Text size=\"large\">Purpose</Text>\n            {PURPOSE_CONTENT}\n            <Text>Example:</Text>\n            <CodeDisplay text={PURPOSE_EXAMPLE} language=\"javascript\" />\n            <List\n              title={\n                <Text style={{ marginTop: \"1rem\" }}>In this example:</Text>\n              }\n            >\n              <ListItem>\n                <Text>\n                  The `expensiveCalculation` function is only called{\" \"}\n                  <Highlighted>when `a` or `b` changes.</Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  The memoized value is stored and returned if{\" \"}\n                  <Highlighted>`a` and `b` remain the same.</Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"detailed-breakdown\">\n          <StyledSubsection>\n            <List title={<Text size=\"large\">Detailed Breakdown</Text>}>\n              <ListItem>\n                <Text>\n                  <Highlighted>Function Execution</Highlighted>\n                </Text>\n                <Text style={{ marginTop: \"0.25rem\" }}>{FN_EXECUTION}</Text>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.5rem\" }}>\n                <Text>\n                  <Highlighted>Dependency Array</Highlighted>\n                </Text>\n                <Text style={{ marginTop: \"0.25rem\" }}>{DEPENDENCY_ARRAY}</Text>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.5rem\" }}>\n                <Text>\n                  <Highlighted>Memoization</Highlighted>\n                </Text>\n                <Text style={{ marginTop: \"0.25rem\" }}>{MEMOIZATION}</Text>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.5rem\" }}>\n                <Text>\n                  <Highlighted>Caching Strategy</Highlighted>\n                </Text>\n                <List\n                  variant=\"unordered\"\n                  title={\n                    <Text style={{ marginTop: \"0.25rem\" }}>\n                      `useMemo` employs a caching strategy that ensures values\n                      are recalculated only when necessary. This is particularly\n                      useful for:\n                    </Text>\n                  }\n                >\n                  <ListItem>\n                    Expensive calculations: Computations that require\n                    significant CPU resources.\n                  </ListItem>\n                  <ListItem>\n                    Referential equality: Ensuring objects or arrays are only\n                    recreated when dependencies change, preventing unnecessary\n                    re-renders of child components.\n                  </ListItem>\n                </List>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.5rem\" }}>\n                <Text>\n                  <Highlighted>Comparison with useCallback</Highlighted>\n                </Text>\n                <Text style={{ marginTop: \"0.25rem\" }}>\n                  useCallback is similar to useMemo, but it memoizes a function\n                  instead of a value:\n                </Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"javascript\"\n                  text={MEMOIZED_CALLBACK}\n                />\n                <Text style={{ marginTop: \"1rem\" }}>\n                  Use useCallback when you need to memoize a function to avoid\n                  passing new function references to child components, which can\n                  prevent unnecessary re-renders.\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"practical-use-cases\">\n          <StyledSubsection>\n            <List\n              variant=\"ordered\"\n              title={<Text size=\"large\">Practical Use Cases</Text>}\n            >\n              <ListItem>\n                <Text>Complex Cases</Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"javascript\"\n                  text={COMPLEX_CALCULATION}\n                />\n                <Text style={{ marginTop: \"1rem\" }}>\n                  In this example, sortedList is only recalculated if list\n                  changes.\n                </Text>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.5rem\" }}>\n                <Text>Avoiding Referential Equality Issues</Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"javascript\"\n                  text={MEMOIZED_OPTION}\n                />\n                <Text style={{ marginTop: \"1rem\" }}>\n                  Here, memoizedOptions ensures the same object reference is\n                  used across renders, which can be important for dependency\n                  checks or child component props.\n                </Text>\n              </ListItem>\n              <ListItem style={{ marginTop: \"0.5rem\" }}>\n                <Text>Component Performance</Text>\n                <Text style={{ marginTop: \"0.25rem\" }}>\n                  In components with heavy computations or expensive renders,\n                  useMemo can significantly{\" \"}\n                  <Highlighted>\n                    improve performance by minimizing unnecessary calculations:\n                  </Highlighted>\n                </Text>\n                <CodeDisplay\n                  style={{ marginTop: \"0.5rem\" }}\n                  language=\"javascript\"\n                  text={COMP_PERFORMANCE}\n                />\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"conclusion\">\n          <StyledSubsection>\n            <Text size=\"large\">Conclusion</Text>\n            <Text>{CONCLUSION}</Text>\n          </StyledSubsection>\n        </StyledSection>\n      </StyledTopicContent>\n      {!mobile && (\n        <SideBar top=\"6rem\" right=\"4rem\">\n          {sections.map((section) => (\n            <SideBarItem\n              size=\"small\"\n              key={section.id}\n              selected={sidebarSelected === section.id}\n              onClick={() => onSideBarItemClick(section.id)}\n            >\n              {section.title}\n            </SideBarItem>\n          ))}\n        </SideBar>\n      )}\n    </StyledMain>\n  );\n};\n\nexport default UseMemo;\n"],"names":["sections","id","title","UseMemo","sidebarSelected","setSidebarSelected","React","isMounted","setIsMounted","width","useWindowSize","mobile","observer","IntersectionObserver","entries","entry","isIntersecting","target","threshold","rootMargin","map","section","document","getElementById","forEach","observe","disconnect","color","useTheme","theme","colorPalette","primary","accentScale","Highlighted","_ref","children","_jsx","style","INTRODUCTION_CONTENT","_jsxs","Text","PURPOSE_CONTENT","CONCLUSION","StyledMain","StyledTopicContent","className","StyledSection","StyledSubsection","Breadcrumbs","size","delimiter","BreadcrumbsItem","link","marginTop","CodeDisplay","text","language","List","ListItem","variant","SideBar","top","right","SideBarItem","selected","onClick","element","scrollIntoView","behavior","block","inline","onSideBarItemClick"],"sourceRoot":""}