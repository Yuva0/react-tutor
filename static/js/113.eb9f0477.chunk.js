"use strict";(self.webpackChunkcstutor=self.webpackChunkcstutor||[]).push([[113],{1113:(e,n,s)=>{s.r(n),s.d(n,{default:()=>d});var t=s(5043),a=s(4306),o=s(1290),i=s(7987),r=s(579);const c=["introduction","definition","props","stateless-vs-stateful","using-hooks","props-and-hooks"],l=(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.EY,{variant:"paragraph",children:"React Hooks allow functional components to have state and other features previously available only in class components. Here are some common hooks:"}),(0,r.jsxs)(a.B8,{children:[(0,r.jsxs)(a.ck,{children:[(0,r.jsx)("b",{children:"useState:"})," Adds state to a functional component."]}),(0,r.jsxs)(a.ck,{children:[(0,r.jsx)("b",{children:"useEffect:"})," Performs side effects in functional components"]})]})]}),d=()=>{const[e,n]=t.useState("introduction"),[s,d]=t.useState(!1),{width:p}=(0,i.lW)(),h=p<1200;t.useEffect((()=>{const e=new IntersectionObserver((e=>{for(const s of e)if(s.isIntersecting){n(s.target.id);break}}),{threshold:1,rootMargin:"64px"});return c.map((e=>document.getElementById(e))).forEach((n=>{if(n)return e.observe(n)})),()=>{e.disconnect()}})),t.useEffect((()=>{d(!0)}),[]);const u=e=>{const n=document.getElementById(e);n&&n.scrollIntoView({behavior:"smooth",block:"start",inline:"nearest"})};return s?(0,r.jsxs)(o.Hk,{id:"styled-main",children:[(0,r.jsxs)(o._f,{className:s?"fade-in":"",style:{width:h?"100%":"calc(100% - 12rem"},children:[(0,r.jsx)(o.PZ,{id:"introduction",children:(0,r.jsxs)(o.db,{children:[(0,r.jsxs)(a.BI,{size:"small",color:"primary",delimiter:"/",children:[(0,r.jsx)(a.yd,{title:"Components"}),(0,r.jsx)(a.yd,{link:"/components/function-component",title:"Function Component"})]}),(0,r.jsx)(a.EY,{variant:"paragraph",size:"large",style:{marginTop:"1rem"},children:"Introduction"}),(0,r.jsx)(a.EY,{children:"In React, a FunctionComponent (also known as a functional component) is a simpler way to write components using JavaScript functions. Unlike class components, which are defined using ES6 classes, functional components are defined as plain JavaScript functions."})]})}),(0,r.jsx)(o.PZ,{id:"definition",children:(0,r.jsxs)(o.db,{children:[(0,r.jsx)(a.EY,{variant:"paragraph",size:"large",children:"Definition"}),(0,r.jsx)(a.EY,{children:"A FunctionComponent is defined as a JavaScript function that takes props as an argument and returns React elements (JSX). Here is an example of a basic functional component:"}),(0,r.jsx)(a.sY,{language:"JSX",text:"import React from 'react';\n\nfunction MyComponent(props) {\n  return <div> Hello, {props.name}! </div>;\n}\n\nexport default MyComponent;\n"})]})}),(0,r.jsx)(o.PZ,{children:(0,r.jsxs)(o.db,{id:"props",children:[(0,r.jsx)(a.EY,{variant:"paragraph",size:"large",children:"Props"}),(0,r.jsx)(a.EY,{children:"Props are passed to a FunctionComponent as an argument. The props object contains all the data passed from the parent component. You can access these props and use them within your component:"}),(0,r.jsx)(a.sY,{language:"JSX",text:"function Greeting(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n"}),(0,r.jsx)(a.EY,{style:{marginTop:"0.5rem"},children:"You can also use destructuring to directly access specific props:"}),(0,r.jsx)(a.sY,{language:"JSX",text:"function Greeting({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}\n"})]})}),(0,r.jsx)(o.PZ,{children:(0,r.jsxs)(o.db,{id:"stateless-vs-stateful",children:[(0,r.jsx)(a.EY,{variant:"paragraph",size:"large",children:"Stateless vs Stateful"}),(0,r.jsx)(a.EY,{children:"Functional components are also known as stateless components because they do not have state or lifecycle methods. Before the introduction of hooks, functional components were limited to rendering UI based on props passed to them. With the introduction of hooks, functional components can now have state and lifecycle methods, making them more powerful and versatile."})]})}),(0,r.jsx)(o.PZ,{children:(0,r.jsxs)(o.db,{id:"using-hooks",children:[(0,r.jsx)(a.EY,{variant:"paragraph",size:"large",children:"Using Hooks"}),l,(0,r.jsx)(a.EY,{variant:"paragraph",style:{marginTop:"0.5rem",scrollMarginTop:"4rem"},id:"use-state-example",children:"useState Example"}),(0,r.jsx)(a.sY,{language:"JSX",text:"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n"}),(0,r.jsx)(a.EY,{variant:"paragraph",style:{marginTop:"0.75rem",scrollMarginTop:"4rem"},id:"use-effect-example",children:"useEffect Example"}),(0,r.jsx)(a.sY,{language:"JSX",text:"import React, { useEffect } from 'react';\n\nfunction Timer() {\n  useEffect(() => {\n    const timer = setInterval(() => {\n      console.log('Tick');\n    }, 1000);\n\n    // Cleanup function\n    return () => clearInterval(timer);\n  }, []); // Empty array means this effect runs once after the initial render\n\n  return <div>Check the console for ticks.</div>;\n}\n"}),(0,r.jsx)(a.EY,{variant:"paragraph",size:"large",style:{marginTop:"0.75rem",scrollMarginTop:"4rem"},id:"advantages",children:"Advantages"}),(0,r.jsxs)(a.B8,{variant:"unordered",children:[(0,r.jsxs)(a.ck,{children:[(0,r.jsx)("b",{children:"Simplicity:"})," Functional components are simpler and easier to read and test."]}),(0,r.jsxs)(a.ck,{children:[(0,r.jsx)("b",{children:"Performance:"})," They can be more performant because they avoid the overhead associated with class components."]}),(0,r.jsxs)(a.ck,{children:[(0,r.jsx)("b",{children:"Hooks:"})," With hooks, functional components can now manage state and side effects, making them powerful and flexible."]})]})]})}),(0,r.jsx)(o.PZ,{children:(0,r.jsxs)(o.db,{id:"props-and-hooks",children:[(0,r.jsx)(a.EY,{variant:"paragraph",size:"large",children:"Example with Props and Hooks"}),(0,r.jsx)(a.sY,{language:"JSX",text:"import React, { useState } from 'react';\n\nfunction UserProfile({ userName }) {\n  const [likes, setLikes] = useState(0);\n\n  return (\n    <div>\n      <h1>{userName}'s Profile</h1>\n      <p>Likes: {likes}</p>\n      <button onClick={() => setLikes(likes + 1)}>Like</button>\n    </div>\n  );\n}\n\nexport default UserProfile;\n"}),(0,r.jsx)(a.EY,{variant:"paragraph",style:{marginTop:"0.75rem"},children:"In this example, UserProfile is a functional component that takes userName as a prop and manages the likes state using the useState hook."}),(0,r.jsx)(a.EY,{variant:"paragraph",children:"In summary, FunctionComponents in React are a more modern and concise way to define components. With the addition of hooks, they can handle complex logic and state management, making them a versatile choice for building React applications."})]})})]}),!h&&(0,r.jsxs)(a.Sr,{top:"6rem",right:"4rem",style:{background:"transparent",position:"fixed"},children:[(0,r.jsx)(a.WW,{size:"small",selected:"introduction"===e,onClick:()=>{u("introduction")},children:"Introduction"}),(0,r.jsx)(a.WW,{size:"small",selected:"definition"===e,onClick:()=>{u("definition")},children:"Definition"}),(0,r.jsx)(a.WW,{size:"small",selected:"props"===e,onClick:()=>{u("props")},children:"Props"}),(0,r.jsx)(a.WW,{size:"small",selected:"stateless-vs-stateful"===e,onClick:()=>{u("stateless-vs-stateful")},children:"Stateless vs Stateful"}),(0,r.jsx)(a.WW,{size:"small",selected:"using-hooks"===e,onClick:()=>u("using-hooks"),children:"Using Hooks"}),(0,r.jsx)(a.WW,{size:"small",selected:"props-and-hooks"===e,onClick:()=>{u("props-and-hooks")},children:"Props and Hooks"})]})]}):(0,r.jsx)(o.Hk,{children:null})}}}]);
//# sourceMappingURL=113.eb9f0477.chunk.js.map