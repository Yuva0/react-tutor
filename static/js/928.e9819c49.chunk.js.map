{"version":3,"file":"static/js/928.e9819c49.chunk.js","mappings":"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","sources":["content/UseContext.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  StyledMain,\n  StyledSection,\n  StyledSubsection,\n  StyledTopicContent,\n} from \"../components/StyledInternalComponents/StyledInternalComponents\";\nimport {\n  Breadcrumbs,\n  BreadcrumbsItem,\n  Text,\n  CodeDisplay,\n  List,\n  ListItem,\n  SideBar,\n  SideBarItem,\n  useTheme,\n} from \"stelios\";\nimport { useWindowSize } from \"../helpers/helpers\";\n\nconst sections = [\n  { id: \"what-is-context\", title: \"What is Context?\" },\n  { id: \"creating-context\", title: \"Creating Context\" },\n  { id: \"using-the-context\", title: \"Using the context with useContext\" },\n  { id: \"how-use-context-works\", title: \"How useContext works?\" },\n  { id: \"best-practices\", title: \"Best Practices\" },\n  {\n    id: \"examples-with-multiple-contexts\",\n    title: \"Examples with Multiple Contexts\",\n  },\n  { id: \"context-vs-props\", title: \"Context vs Props\" },\n];\n\nconst CREATING_CONTEXT_EXAMPLE = `import React, { createContext, useState } from 'react';\n\n// Create a Context with a default value\nconst MyContext = createContext(defaultValue);\n\nconst MyProvider = ({ children }) => {\n  const [value, setValue] = useState('some value');\n\n  return (\n    <MyContext.Provider value={{ value, setValue }}>\n      {children}\n    </MyContext.Provider>\n  );\n};\n`;\nconst USE_CONTEXT_SYNTAX = `const contextValue = useContext(MyContext);`;\nconst USE_CONTEXT_EXAMPLE = `import React, { useContext } from 'react';\nimport MyContext from './MyContext'; // Import the context object\n\nconst MyComponent = () => {\n  // Access the context value\n  const { value, setValue } = useContext(MyContext);\n\n  return (\n    <div>\n      <p>Value from context: {value}</p>\n      <button onClick={() => setValue('new value')}>Change Value</button>\n    </div>\n  );\n};\n`;\nconst EXAMPLE_MULTIPLE_CONTEXT = `const UserContext = createContext(null);\nconst ThemeContext = createContext('light');\n\nconst App = () => {\n  return (\n    <UserContext.Provider value={/* user data */}>\n      <ThemeContext.Provider value={/* theme data */}>\n        <MyComponent />\n      </ThemeContext.Provider>\n    </UserContext.Provider>\n  );\n};\n\nconst MyComponent = () => {\n  const user = useContext(UserContext);\n  const theme = useContext(ThemeContext);\n\n  return (\n    <div style={{ color: theme === 'dark' ? 'white' : 'black' }}>\n      {user ? \\`Hello, \\${user.name}\\` : 'Please log in'}\n    </div>\n  );\n};\n`;\n\nconst UseContext: React.FC = () => {\n  const [sidebarSelected, setSidebarSelected] = React.useState(\"introduction\");\n  const [isMounted, setIsMounted] = React.useState(false);\n  const { width } = useWindowSize();\n  const mobile = width < 1200;\n\n  React.useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  React.useEffect(() => {\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n      for (const entry of entries) {\n        if (entry.isIntersecting) {\n          setSidebarSelected(entry.target.id);\n          break;\n        }\n      }\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      threshold: 1,\n      rootMargin: \"64px\",\n    });\n\n    const _sections = sections.map((section) =>\n      document.getElementById(section.id)\n    );\n    _sections.forEach((section) => {\n      if (!section) return;\n      return observer.observe(section);\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  });\n\n  const color = useTheme().theme.colorPalette.primary.accentScale[10];\n  const Highlighted = ({ children }: { children: React.ReactNode }) => {\n    return <span style={{ color: color }}>{children}</span>;\n  };\n\n  /* --------------------------------------------------------------------------------------\n  |                            Data to be displayed                                       |\n  -------------------------------------------------------------------------------------- */\n  const INTRODUCTION_CONTENT = (\n    <Text>\n      In React, the Context API is a mechanism for passing data through the\n      component tree without having to pass props down manually at every level.\n      It's useful for{\" \"}\n      <Highlighted>\n        sharing global data such as user information, themes, or settings that\n        many components might need.\n      </Highlighted>\n    </Text>\n  );\n  /* ----------------------------------------------------------------------------------- */\n\n  const onSideBarItemClick = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"start\",\n        inline: \"nearest\",\n      });\n    }\n  };\n\n  if (!isMounted) return <StyledMain>{null}</StyledMain>;\n  return (\n    <StyledMain>\n      <StyledTopicContent\n        style={{ width: mobile ? \"100%\" : \"calc(100% - 12rem\" }}\n        className={isMounted ? \"fade-in\" : \"\"}\n      >\n        <StyledSection id=\"what-is-context\">\n          <StyledSubsection>\n            <Breadcrumbs size=\"small\" color=\"primary\" delimiter=\"/\">\n              <BreadcrumbsItem title=\"Hooks\" />\n              <BreadcrumbsItem link=\"/hooks/use-context\" title=\"useContext\" />\n            </Breadcrumbs>\n            <Text size=\"large\" style={{ marginTop: \"1rem\" }}>\n              What is context?\n            </Text>\n            {INTRODUCTION_CONTENT}\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"creating-context\">\n          <StyledSubsection>\n            <Text size=\"large\">Creating Context</Text>\n            <List\n              title={\n                <Text>\n                  Before you can use the useContext hook, you need to create a{\" \"}\n                  <Highlighted>\n                    Context object using React.createContext.\n                  </Highlighted>{\" \"}\n                  This object will include two key components:\n                </Text>\n              }\n            >\n              <ListItem>\n                <Text>\n                  <Highlighted>Provider:</Highlighted> A component that holds\n                  the context's value and provides it to its descendant\n                  components.\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  <Highlighted>Consumer:</Highlighted> A component that\n                  subscribes to context changes and uses the context value.\n                </Text>\n              </ListItem>\n            </List>\n            <Text>Example</Text>\n            <CodeDisplay\n              language=\"javascript\"\n              text={CREATING_CONTEXT_EXAMPLE}\n            />\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"using-the-context\">\n          <Text size=\"large\">Using the Context with useContext</Text>\n          <Text>\n            The useContext hook allows you to access the context value from the{\" \"}\n            <Highlighted>\n              nearest Provider component in the component tree.\n            </Highlighted>\n          </Text>\n          <Text>Syntax</Text>\n          <CodeDisplay language=\"javascript\" text={USE_CONTEXT_SYNTAX} />\n          <Text style={{ marginTop: \"0.5rem\" }}>Example</Text>\n          <CodeDisplay language=\"javascript\" text={USE_CONTEXT_EXAMPLE} />\n        </StyledSection>\n        <StyledSection id=\"how-use-context-works\">\n          <StyledSubsection>\n            <Text size=\"large\">How useContext works?</Text>\n            <Text>\n              When you call useContext(MyContext) in a component, it reads the\n              context value from the nearest Provider component in the component\n              tree.{\" \"}\n              <Highlighted>\n                The useContext hook will re-render the component when the\n                context value changes.\n              </Highlighted>\n            </Text>\n            <List>\n              <ListItem>\n                <Text>\n                  Context Creation: First, you create a Context object using\n                  createContext.{\" \"}\n                  <Highlighted>\n                    This provides a Provider and a Consumer.\n                  </Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Provider Component: You wrap your component tree with the\n                  Provider component from the context. The value prop on the\n                  Provider{\" \"}\n                  <Highlighted>\n                    specifies the value that will be available to all\n                    descendants.\n                  </Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Using useContext: Within a descendant component, you use the\n                  useContext hook to access the context's value.{\" \"}\n                  <Highlighted>\n                    This hook will return the current context value.\n                  </Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Reactivity: When the value provided by the Provider changes,\n                  all components using{\" \"}\n                  <Highlighted>\n                    useContext will automatically re-render to reflect the\n                    updated value.\n                  </Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection id=\"best-practices\">\n          <StyledSubsection>\n            <List\n              title={<Text size=\"large\">Best Practices</Text>}\n              variant=\"unordered\"\n            >\n              <ListItem>\n                <Text>\n                  Default Values: Provide a default value when creating the\n                  context to ensure that your components have a fallback if\n                  they're used outside of a Provider.\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Minimal State in Context: Only put the minimal required state\n                  in context to avoid unnecessary re-renders. For more complex\n                  state management, consider using{\" \"}\n                  <Highlighted>state management libraries.</Highlighted>\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Separate Contexts: Create separate contexts for different\n                  pieces of state or different parts of your application to{\" \"}\n                  <Highlighted>maintain clarity and modularity.</Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection id=\"examples-with-multiple-contexts\">\n            <Text size=\"large\">Examples with Multiple Contexts</Text>\n            <Text>\n              You can use multiple contexts in a single component by nesting\n              multiple Provider components. Each Provider will provide a\n              different context value to its descendants.\n            </Text>\n            <CodeDisplay\n              style={{ marginTop: \"0.25rem\" }}\n              language=\"javascript\"\n              text={EXAMPLE_MULTIPLE_CONTEXT}\n            />\n          </StyledSubsection>\n        </StyledSection>\n        <StyledSection>\n          <StyledSubsection id=\"context-vs-props\">\n            <Text size=\"large\">Context vs Props</Text>\n            <List\n              title={\n                <Text>\n                  Context is useful for passing data that is needed by many\n                  components in your application. It's a way to avoid prop\n                  drilling and make your code cleaner and more maintainable.\n                </Text>\n              }\n            >\n              <ListItem>\n                <Text>\n                  Context: Use context when you have data that needs to be{\" \"}\n                  <Highlighted>\n                    accessed by many components at different levels of the\n                    component\n                  </Highlighted>{\" \"}\n                  tree.\n                </Text>\n              </ListItem>\n              <ListItem>\n                <Text>\n                  Props: Use props when you have data that is only needed by a{\" \"}\n                  <Highlighted>\n                    single component or a few components.\n                  </Highlighted>\n                </Text>\n              </ListItem>\n            </List>\n            <Text style={{ marginTop: \"0.5rem\" }}>\n              By using useContext, you simplify the process of accessing and\n              managing global state in your React applications.\n            </Text>\n          </StyledSubsection>\n        </StyledSection>\n      </StyledTopicContent>\n      {!mobile && (\n        <SideBar top=\"6rem\" right=\"4rem\">\n          {sections.map((section) => (\n            <SideBarItem\n              size=\"small\"\n              key={section.id}\n              selected={sidebarSelected === section.id}\n              onClick={() => onSideBarItemClick(section.id)}\n            >\n              {section.title}\n            </SideBarItem>\n          ))}\n        </SideBar>\n      )}\n    </StyledMain>\n  );\n};\n\nexport default UseContext;\n"],"names":["sections","id","title","UseContext","sidebarSelected","setSidebarSelected","React","isMounted","setIsMounted","width","useWindowSize","mobile","observer","IntersectionObserver","entries","entry","isIntersecting","target","threshold","rootMargin","map","section","document","getElementById","forEach","observe","disconnect","color","useTheme","theme","colorPalette","primary","accentScale","Highlighted","_ref","children","_jsx","style","INTRODUCTION_CONTENT","_jsxs","Text","StyledMain","StyledTopicContent","className","StyledSection","StyledSubsection","Breadcrumbs","size","delimiter","BreadcrumbsItem","link","marginTop","List","ListItem","CodeDisplay","language","text","variant","SideBar","top","right","SideBarItem","selected","onClick","element","scrollIntoView","behavior","block","inline","onSideBarItemClick"],"sourceRoot":""}